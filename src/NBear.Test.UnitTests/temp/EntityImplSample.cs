//------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Runtime Version:2.0.50727.42
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class OrderDetailsExtendedArrayList : NBear.Common.EntityArrayList<Entities.OrderDetailsExtended> {
        }
        
        [System.SerializableAttribute()]
        public partial class OrderDetailsExtended : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _OrderDetailsExtendedEntityConfiguration;
            
            protected int _OrderID;
            
            protected int _ProductID;
            
            protected string _ProductName;
            
            protected decimal _UnitPrice;
            
            protected short _Quantity;
            
            protected float _Discount;
            
            protected decimal _ExtendedPrice;
            
    		public static bool operator ==(global::Entities.OrderDetailsExtended left, global::Entities.OrderDetailsExtended right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.OrderDetailsExtended left, global::Entities.OrderDetailsExtended right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int OrderID {
                get {
                    return this._OrderID;
                }
                set {
                    this.OnPropertyChanged("OrderID", this._OrderID, value);
                    this._OrderID = value;
                }
            }
            
            public int ProductID {
                get {
                    return this._ProductID;
                }
                set {
                    this.OnPropertyChanged("ProductID", this._ProductID, value);
                    this._ProductID = value;
                }
            }
            
            public string ProductName {
                get {
                    return this._ProductName;
                }
                set {
                    this.OnPropertyChanged("ProductName", this._ProductName, value);
                    this._ProductName = value;
                }
            }
            
            public decimal UnitPrice {
                get {
                    return this._UnitPrice;
                }
                set {
                    this.OnPropertyChanged("UnitPrice", this._UnitPrice, value);
                    this._UnitPrice = value;
                }
            }
            
            public short Quantity {
                get {
                    return this._Quantity;
                }
                set {
                    this.OnPropertyChanged("Quantity", this._Quantity, value);
                    this._Quantity = value;
                }
            }
            
            public float Discount {
                get {
                    return this._Discount;
                }
                set {
                    this.OnPropertyChanged("Discount", this._Discount, value);
                    this._Discount = value;
                }
            }
            
            public decimal ExtendedPrice {
                get {
                    return this._ExtendedPrice;
                }
                set {
                    this.OnPropertyChanged("ExtendedPrice", this._ExtendedPrice, value);
                    this._ExtendedPrice = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((OrderDetailsExtended._OrderDetailsExtendedEntityConfiguration == null)) {
                    OrderDetailsExtended._OrderDetailsExtendedEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.OrderDetailsExtended");
                }
                return OrderDetailsExtended._OrderDetailsExtendedEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._OrderID,
                        this._ProductID,
                        this._ProductName,
                        this._UnitPrice,
                        this._Quantity,
                        this._Discount,
                        this._ExtendedPrice};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._OrderID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ProductID = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._ProductName = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._UnitPrice = reader.GetDecimal(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Quantity = reader.GetInt16(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._Discount = reader.GetFloat(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._ExtendedPrice = reader.GetDecimal(6);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._OrderID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ProductID = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._ProductName = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._UnitPrice = ((decimal)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Quantity = ((short)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._Discount = ((float)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._ExtendedPrice = ((decimal)(row[6]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.OrderDetailsExtended).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.OrderDetailsExtended)(obj)).isAttached) 
                            && base.Equals(obj));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem OrderID = new NBear.Common.PropertyItem("OrderID");
                
                public static NBear.Common.PropertyItem ProductID = new NBear.Common.PropertyItem("ProductID");
                
                public static NBear.Common.PropertyItem ProductName = new NBear.Common.PropertyItem("ProductName");
                
                public static NBear.Common.PropertyItem UnitPrice = new NBear.Common.PropertyItem("UnitPrice");
                
                public static NBear.Common.PropertyItem Quantity = new NBear.Common.PropertyItem("Quantity");
                
                public static NBear.Common.PropertyItem Discount = new NBear.Common.PropertyItem("Discount");
                
                public static NBear.Common.PropertyItem ExtendedPrice = new NBear.Common.PropertyItem("ExtendedPrice");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class CategoryArrayList : NBear.Common.EntityArrayList<Entities.Category> {
        }
        
        [System.SerializableAttribute()]
        public partial class Category : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _CategoryEntityConfiguration;
            
            protected int _CategoryID;
            
            protected string _CategoryName;
            
            protected string _Description;
            
            protected byte[] _Picture;
            
    		public static bool operator ==(global::Entities.Category left, global::Entities.Category right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Category left, global::Entities.Category right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int CategoryID {
                get {
                    return this._CategoryID;
                }
                set {
                    this.OnPropertyChanged("CategoryID", this._CategoryID, value);
                    this._CategoryID = value;
                }
            }
            
            public string CategoryName {
                get {
                    return this._CategoryName;
                }
                set {
                    this.OnPropertyChanged("CategoryName", this._CategoryName, value);
                    this._CategoryName = value;
                }
            }
            
            public string Description {
                get {
                    return this._Description;
                }
                set {
                    this.OnPropertyChanged("Description", this._Description, value);
                    this._Description = value;
                }
            }
            
            public byte[] Picture {
                get {
                    return this._Picture;
                }
                set {
                    this.OnPropertyChanged("Picture", this._Picture, value);
                    this._Picture = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Category._CategoryEntityConfiguration == null)) {
                    Category._CategoryEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Category");
                }
                return Category._CategoryEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._CategoryID,
                        this._CategoryName,
                        this._Description,
                        this._Picture};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._CategoryID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._CategoryName = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Description = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Picture = ((byte[])(reader.GetValue(3)));
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._CategoryID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._CategoryName = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Description = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Picture = ((byte[])(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Category).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Category)(obj)).isAttached) 
                            && (this.CategoryID == ((global::Entities.Category)(obj)).CategoryID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem CategoryID = new NBear.Common.PropertyItem("CategoryID");
                
                public static NBear.Common.PropertyItem CategoryName = new NBear.Common.PropertyItem("CategoryName");
                
                public static NBear.Common.PropertyItem Description = new NBear.Common.PropertyItem("Description");
                
                public static NBear.Common.PropertyItem Picture = new NBear.Common.PropertyItem("Picture");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class PrivilegeOwnerArrayList : NBear.Common.EntityArrayList<Entities.PrivilegeOwner> {
        }
        
        [System.SerializableAttribute()]
        public partial class PrivilegeOwner : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _PrivilegeOwnerEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
    		public static bool operator ==(global::Entities.PrivilegeOwner left, global::Entities.PrivilegeOwner right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.PrivilegeOwner left, global::Entities.PrivilegeOwner right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((PrivilegeOwner._PrivilegeOwnerEntityConfiguration == null)) {
                    PrivilegeOwner._PrivilegeOwnerEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.PrivilegeOwner");
                }
                return PrivilegeOwner._PrivilegeOwnerEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.PrivilegeOwner).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.PrivilegeOwner)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.PrivilegeOwner)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserGroupArrayList : NBear.Common.EntityArrayList<Entities.UserGroup> {
        }
        
        [System.SerializableAttribute()]
        public partial class UserGroup : PrivilegeOwner {
            
            protected static NBear.Common.EntityConfiguration _UserGroupEntityConfiguration;
            
            protected string _Comment;
            
    		public static bool operator ==(global::Entities.UserGroup left, global::Entities.UserGroup right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.UserGroup left, global::Entities.UserGroup right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Comment {
                get {
                    return this._Comment;
                }
                set {
                    this.OnPropertyChanged("Comment", this._Comment, value);
                    this._Comment = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((UserGroup._UserGroupEntityConfiguration == null)) {
                    UserGroup._UserGroupEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.UserGroup");
                }
                return UserGroup._UserGroupEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Comment};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Comment = reader.GetString(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Comment = ((string)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.UserGroup).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.UserGroup)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.UserGroup)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Comment = new NBear.Common.PropertyItem("Comment");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserArrayList : NBear.Common.EntityArrayList<Entities.User> {
        }
        
        [System.SerializableAttribute()]
        public partial class User : PrivilegeOwner {
            
            protected static NBear.Common.EntityConfiguration _UserEntityConfiguration;
            
    		public static bool operator ==(global::Entities.User left, global::Entities.User right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.User left, global::Entities.User right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((User._UserEntityConfiguration == null)) {
                    User._UserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.User");
                }
                return User._UserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.User).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.User)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.User)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class GhostUserArrayList : NBear.Common.EntityArrayList<Entities.GhostUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class GhostUser : User {
            
            protected static NBear.Common.EntityConfiguration _GhostUserEntityConfiguration;
            
    		public static bool operator ==(global::Entities.GhostUser left, global::Entities.GhostUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.GhostUser left, global::Entities.GhostUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((GhostUser._GhostUserEntityConfiguration == null)) {
                    GhostUser._GhostUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.GhostUser");
                }
                return GhostUser._GhostUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.GhostUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.GhostUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.GhostUser)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class LocalUserArrayList : NBear.Common.EntityArrayList<Entities.LocalUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class LocalUser : User {
            
            protected static NBear.Common.EntityConfiguration _LocalUserEntityConfiguration;
            
            protected string _LoginID;
            
            protected string _Password;
            
    		public static bool operator ==(global::Entities.LocalUser left, global::Entities.LocalUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.LocalUser left, global::Entities.LocalUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string LoginID {
                get {
                    return this._LoginID;
                }
                set {
                    this.OnPropertyChanged("LoginID", this._LoginID, value);
                    this._LoginID = value;
                }
            }
            
            public string Password {
                get {
                    return this._Password;
                }
                set {
                    this.OnPropertyChanged("Password", this._Password, value);
                    this._Password = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((LocalUser._LocalUserEntityConfiguration == null)) {
                    LocalUser._LocalUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.LocalUser");
                }
                return LocalUser._LocalUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._LoginID,
                        this._Password};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._LoginID = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Password = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._LoginID = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Password = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.LocalUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.LocalUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.LocalUser)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem LoginID = new NBear.Common.PropertyItem("LoginID");
                
                public static NBear.Common.PropertyItem Password = new NBear.Common.PropertyItem("Password");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class AgentUserArrayList : NBear.Common.EntityArrayList<Entities.AgentUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class AgentUser : User {
            
            protected static NBear.Common.EntityConfiguration _AgentUserEntityConfiguration;
            
            protected string _LoginID;
            
    		public static bool operator ==(global::Entities.AgentUser left, global::Entities.AgentUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.AgentUser left, global::Entities.AgentUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string LoginID {
                get {
                    return this._LoginID;
                }
                set {
                    this.OnPropertyChanged("LoginID", this._LoginID, value);
                    this._LoginID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((AgentUser._AgentUserEntityConfiguration == null)) {
                    AgentUser._AgentUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.AgentUser");
                }
                return AgentUser._AgentUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._LoginID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._LoginID = reader.GetString(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._LoginID = ((string)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.AgentUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.AgentUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.AgentUser)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem LoginID = new NBear.Common.PropertyItem("LoginID");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class OrderArrayList : NBear.Common.EntityArrayList<Entities.Order> {
        }
        
        [System.SerializableAttribute()]
        public partial class Order : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _OrderEntityConfiguration;
            
            protected int _OrderID;
            
            protected string _CustomerID;
            
            protected int _EmployeeID;
            
            protected global::System.DateTime _OrderDate;
            
            protected global::System.DateTime _RequiredDate;
            
            protected global::System.DateTime _ShippedDate;
            
            protected int _ShipVia;
            
            protected decimal _Freight;
            
            protected string _ShipName;
            
            protected string _ShipAddress;
            
            protected string _ShipCity;
            
            protected string _ShipRegion;
            
            protected string _ShipPostalCode;
            
            protected string _ShipCountry;
            
    		public static bool operator ==(global::Entities.Order left, global::Entities.Order right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Order left, global::Entities.Order right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int OrderID {
                get {
                    return this._OrderID;
                }
                set {
                    this.OnPropertyChanged("OrderID", this._OrderID, value);
                    this._OrderID = value;
                }
            }
            
            public string CustomerID {
                get {
                    return this._CustomerID;
                }
                set {
                    this.OnPropertyChanged("CustomerID", this._CustomerID, value);
                    this._CustomerID = value;
                }
            }
            
            public int EmployeeID {
                get {
                    return this._EmployeeID;
                }
                set {
                    this.OnPropertyChanged("EmployeeID", this._EmployeeID, value);
                    this._EmployeeID = value;
                }
            }
            
            public global::System.DateTime OrderDate {
                get {
                    return this._OrderDate;
                }
                set {
                    this.OnPropertyChanged("OrderDate", this._OrderDate, value);
                    this._OrderDate = value;
                }
            }
            
            public global::System.DateTime RequiredDate {
                get {
                    return this._RequiredDate;
                }
                set {
                    this.OnPropertyChanged("RequiredDate", this._RequiredDate, value);
                    this._RequiredDate = value;
                }
            }
            
            public global::System.DateTime ShippedDate {
                get {
                    return this._ShippedDate;
                }
                set {
                    this.OnPropertyChanged("ShippedDate", this._ShippedDate, value);
                    this._ShippedDate = value;
                }
            }
            
            public int ShipVia {
                get {
                    return this._ShipVia;
                }
                set {
                    this.OnPropertyChanged("ShipVia", this._ShipVia, value);
                    this._ShipVia = value;
                }
            }
            
            public decimal Freight {
                get {
                    return this._Freight;
                }
                set {
                    this.OnPropertyChanged("Freight", this._Freight, value);
                    this._Freight = value;
                }
            }
            
            public string ShipName {
                get {
                    return this._ShipName;
                }
                set {
                    this.OnPropertyChanged("ShipName", this._ShipName, value);
                    this._ShipName = value;
                }
            }
            
            public string ShipAddress {
                get {
                    return this._ShipAddress;
                }
                set {
                    this.OnPropertyChanged("ShipAddress", this._ShipAddress, value);
                    this._ShipAddress = value;
                }
            }
            
            public string ShipCity {
                get {
                    return this._ShipCity;
                }
                set {
                    this.OnPropertyChanged("ShipCity", this._ShipCity, value);
                    this._ShipCity = value;
                }
            }
            
            public string ShipRegion {
                get {
                    return this._ShipRegion;
                }
                set {
                    this.OnPropertyChanged("ShipRegion", this._ShipRegion, value);
                    this._ShipRegion = value;
                }
            }
            
            public string ShipPostalCode {
                get {
                    return this._ShipPostalCode;
                }
                set {
                    this.OnPropertyChanged("ShipPostalCode", this._ShipPostalCode, value);
                    this._ShipPostalCode = value;
                }
            }
            
            public string ShipCountry {
                get {
                    return this._ShipCountry;
                }
                set {
                    this.OnPropertyChanged("ShipCountry", this._ShipCountry, value);
                    this._ShipCountry = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Order._OrderEntityConfiguration == null)) {
                    Order._OrderEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Order");
                }
                return Order._OrderEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._OrderID,
                        this._CustomerID,
                        this._EmployeeID,
                        this._OrderDate,
                        this._RequiredDate,
                        this._ShippedDate,
                        this._ShipVia,
                        this._Freight,
                        this._ShipName,
                        this._ShipAddress,
                        this._ShipCity,
                        this._ShipRegion,
                        this._ShipPostalCode,
                        this._ShipCountry};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._OrderID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._CustomerID = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._EmployeeID = reader.GetInt32(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._OrderDate = reader.GetDateTime(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._RequiredDate = reader.GetDateTime(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._ShippedDate = reader.GetDateTime(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._ShipVia = reader.GetInt32(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._Freight = reader.GetDecimal(7);
                }
                if ((false == reader.IsDBNull(8))) {
                    this._ShipName = reader.GetString(8);
                }
                if ((false == reader.IsDBNull(9))) {
                    this._ShipAddress = reader.GetString(9);
                }
                if ((false == reader.IsDBNull(10))) {
                    this._ShipCity = reader.GetString(10);
                }
                if ((false == reader.IsDBNull(11))) {
                    this._ShipRegion = reader.GetString(11);
                }
                if ((false == reader.IsDBNull(12))) {
                    this._ShipPostalCode = reader.GetString(12);
                }
                if ((false == reader.IsDBNull(13))) {
                    this._ShipCountry = reader.GetString(13);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._OrderID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._CustomerID = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._EmployeeID = ((int)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._OrderDate = ((System.DateTime)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._RequiredDate = ((System.DateTime)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._ShippedDate = ((System.DateTime)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._ShipVia = ((int)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._Freight = ((decimal)(row[7]));
                }
                if ((false == row.IsNull(8))) {
                    this._ShipName = ((string)(row[8]));
                }
                if ((false == row.IsNull(9))) {
                    this._ShipAddress = ((string)(row[9]));
                }
                if ((false == row.IsNull(10))) {
                    this._ShipCity = ((string)(row[10]));
                }
                if ((false == row.IsNull(11))) {
                    this._ShipRegion = ((string)(row[11]));
                }
                if ((false == row.IsNull(12))) {
                    this._ShipPostalCode = ((string)(row[12]));
                }
                if ((false == row.IsNull(13))) {
                    this._ShipCountry = ((string)(row[13]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Order).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Order)(obj)).isAttached) 
                            && (this.OrderID == ((global::Entities.Order)(obj)).OrderID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem OrderID = new NBear.Common.PropertyItem("OrderID");
                
                public static NBear.Common.PropertyItem CustomerID = new NBear.Common.PropertyItem("CustomerID");
                
                public static NBear.Common.PropertyItem EmployeeID = new NBear.Common.PropertyItem("EmployeeID");
                
                public static NBear.Common.PropertyItem OrderDate = new NBear.Common.PropertyItem("OrderDate");
                
                public static NBear.Common.PropertyItem RequiredDate = new NBear.Common.PropertyItem("RequiredDate");
                
                public static NBear.Common.PropertyItem ShippedDate = new NBear.Common.PropertyItem("ShippedDate");
                
                public static NBear.Common.PropertyItem ShipVia = new NBear.Common.PropertyItem("ShipVia");
                
                public static NBear.Common.PropertyItem Freight = new NBear.Common.PropertyItem("Freight");
                
                public static NBear.Common.PropertyItem ShipName = new NBear.Common.PropertyItem("ShipName");
                
                public static NBear.Common.PropertyItem ShipAddress = new NBear.Common.PropertyItem("ShipAddress");
                
                public static NBear.Common.PropertyItem ShipCity = new NBear.Common.PropertyItem("ShipCity");
                
                public static NBear.Common.PropertyItem ShipRegion = new NBear.Common.PropertyItem("ShipRegion");
                
                public static NBear.Common.PropertyItem ShipPostalCode = new NBear.Common.PropertyItem("ShipPostalCode");
                
                public static NBear.Common.PropertyItem ShipCountry = new NBear.Common.PropertyItem("ShipCountry");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TestUserArrayList : NBear.Common.EntityArrayList<Entities.TestUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class TestUser : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _TestUserEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType _Type;
            
            protected global::Entities.TypeDescription _TypeDesc;
            
            protected global::Entities.AddressArrayList _Addrs;
            
    		public static bool operator ==(global::Entities.TestUser left, global::Entities.TestUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TestUser left, global::Entities.TestUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public global::NBear.Test.UnitTests.temp.EntityDesignTemp1.UserName? Name {
                get {
                    return ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserName)(NBear.Common.SerializationManager.Deserialize(typeof(NBear.Test.UnitTests.temp.EntityDesignTemp1.UserName), this._Name)));
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = NBear.Common.SerializationManager.Serialize(value);
                }
            }
            
            public global::NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType Type {
                get {
                    return this._Type;
                }
                set {
                    this.OnPropertyChanged("Type", this._Type, value);
                    this._Type = value;
                }
            }
            
            public global::Entities.TypeDescription TypeDesc {
                get {
                    if (this.IsQueryPropertyLoaded("TypeDesc")) {
                    }
                    else {
                        this._TypeDesc = ((global::Entities.TypeDescription)(this.QueryOne(typeof(global::Entities.TypeDescription), "TypeDesc", this)));
                    }
                    return this._TypeDesc;
                }
                set {
                    this.OnQueryOnePropertyChanged("TypeDesc", this.TypeDesc, value);
                    this._TypeDesc = value;
                }
            }
            
            public global::Entities.AddressArrayList Addrs {
                get {
                    if (this.IsQueryPropertyLoaded("Addrs")) {
                    }
                    else {
                        global::Entities.AddressArrayList _a1;
                        _a1 = new Entities.AddressArrayList();
                        _a1.AddRange(((global::Entities.Address[])(this.Query(typeof(global::Entities.Address), "Addrs", this))));
                        this.OnQueryPropertyChanged("Addrs", this._Addrs, _a1);
                        this._Addrs = _a1;
                    }
                    if ((this._Addrs == null)) {
                        global::Entities.AddressArrayList _a1;
                        _a1 = new global::Entities.AddressArrayList();
                        this.BindArrayListEventHandlers("Addrs", _a1);
                        this._Addrs = _a1;
                    }
                    return this._Addrs;
                }
                set {
                    this.OnQueryPropertyChanged("Addrs", this.Addrs, value);
                    this._Addrs = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TestUser._TestUserEntityConfiguration == null)) {
                    TestUser._TestUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TestUser");
                }
                return TestUser._TestUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.TestUser", "TypeDesc")))) {
                    this._TypeDesc = ((global::Entities.TypeDescription)(this.QueryOne(typeof(global::Entities.TypeDescription), "TypeDesc", this)));
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.TestUser", "Addrs")))) {
                    global::Entities.AddressArrayList _a1;
                    _a1 = new Entities.AddressArrayList();
                    _a1.AddRange(((global::Entities.Address[])(this.Query(typeof(global::Entities.Address), "Addrs", this))));
                    this.OnQueryPropertyChanged("Addrs", this._Addrs, _a1);
                    this._Addrs = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Type};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Type = ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType)(reader.GetValue(2)));
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Type = ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TestUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TestUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.TestUser)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Type = new NBear.Common.PropertyItem("Type");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class AdminUserArrayList : NBear.Common.EntityArrayList<Entities.AdminUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class AdminUser : TestUser {
            
            protected static NBear.Common.EntityConfiguration _AdminUserEntityConfiguration;
            
            protected string _Password;
            
    		public static bool operator ==(global::Entities.AdminUser left, global::Entities.AdminUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.AdminUser left, global::Entities.AdminUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Password {
                get {
                    return this._Password;
                }
                set {
                    this.OnPropertyChanged("Password", this._Password, value);
                    this._Password = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((AdminUser._AdminUserEntityConfiguration == null)) {
                    AdminUser._AdminUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.AdminUser");
                }
                return AdminUser._AdminUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Type,
                        this._Password};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Type = ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType)(reader.GetValue(2)));
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Password = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Type = ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Password = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.AdminUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.AdminUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.AdminUser)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Type = new NBear.Common.PropertyItem("Type");
                
                public static NBear.Common.PropertyItem Password = new NBear.Common.PropertyItem("Password");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TypeDescriptionArrayList : NBear.Common.EntityArrayList<Entities.TypeDescription> {
        }
        
        [System.SerializableAttribute()]
        public partial class TypeDescription : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _TypeDescriptionEntityConfiguration;
            
            protected int _TypeID;
            
            protected string _Desc;
            
    		public static bool operator ==(global::Entities.TypeDescription left, global::Entities.TypeDescription right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TypeDescription left, global::Entities.TypeDescription right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int TypeID {
                get {
                    return this._TypeID;
                }
                set {
                    this.OnPropertyChanged("TypeID", this._TypeID, value);
                    this._TypeID = value;
                }
            }
            
            public string Desc {
                get {
                    return this._Desc;
                }
                set {
                    this.OnPropertyChanged("Desc", this._Desc, value);
                    this._Desc = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TypeDescription._TypeDescriptionEntityConfiguration == null)) {
                    TypeDescription._TypeDescriptionEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TypeDescription");
                }
                return TypeDescription._TypeDescriptionEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._TypeID,
                        this._Desc};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._TypeID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Desc = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._TypeID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Desc = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TypeDescription).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TypeDescription)(obj)).isAttached) 
                            && base.Equals(obj));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem TypeID = new NBear.Common.PropertyItem("TypeID");
                
                public static NBear.Common.PropertyItem Desc = new NBear.Common.PropertyItem("Desc");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class AddressArrayList : NBear.Common.EntityArrayList<Entities.Address> {
        }
        
        [System.SerializableAttribute()]
        public partial class Address : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _AddressEntityConfiguration;
            
            protected int _ID;
            
            protected int _UserID;
            
            protected string _Name;
            
            protected string _Content;
            
    		public static bool operator ==(global::Entities.Address left, global::Entities.Address right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Address left, global::Entities.Address right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public int UserID {
                get {
                    return this._UserID;
                }
                set {
                    this.OnPropertyChanged("UserID", this._UserID, value);
                    this._UserID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public string Content {
                get {
                    return this._Content;
                }
                set {
                    this.OnPropertyChanged("Content", this._Content, value);
                    this._Content = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Address._AddressEntityConfiguration == null)) {
                    Address._AddressEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Address");
                }
                return Address._AddressEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._UserID,
                        this._Name,
                        this._Content};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._UserID = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Name = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Content = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._UserID = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Name = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Content = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Address).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Address)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Address)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem UserID = new NBear.Common.PropertyItem("UserID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Content = new NBear.Common.PropertyItem("Content");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TempTableArrayList : NBear.Common.EntityArrayList<Entities.TempTable> {
        }
        
        [System.SerializableAttribute()]
        public partial class TempTable : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _TempTableEntityConfiguration;
            
            protected decimal _ID;
            
            protected string _ColName;
            
            protected global::System.Guid _Guid;
            
    		public static bool operator ==(global::Entities.TempTable left, global::Entities.TempTable right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TempTable left, global::Entities.TempTable right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public decimal ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string ColName {
                get {
                    return this._ColName;
                }
                set {
                    this.OnPropertyChanged("ColName", this._ColName, value);
                    this._ColName = value;
                }
            }
            
            public global::System.Guid Guid {
                get {
                    return this._Guid;
                }
                set {
                    this.OnPropertyChanged("Guid", this._Guid, value);
                    this._Guid = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TempTable._TempTableEntityConfiguration == null)) {
                    TempTable._TempTableEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TempTable");
                }
                return TempTable._TempTableEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._ColName,
                        this._Guid};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetDecimal(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ColName = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Guid = this.GetGuid(reader, 2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((decimal)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ColName = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Guid = ((System.Guid)(this.GetGuid(row, 2)));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TempTable).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TempTable)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.TempTable)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem ColName = new NBear.Common.PropertyItem("ColName");
                
                public static NBear.Common.PropertyItem Guid = new NBear.Common.PropertyItem("Guid");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class MessageArrayList : NBear.Common.EntityArrayList<Entities.Message> {
        }
        
        [System.SerializableAttribute()]
        public partial class Message : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _MessageEntityConfiguration;
            
            protected int _ID;
            
            protected string _AdminFeedback;
            
            protected global::System.DateTime? _AdminFeedbackTime;
            
            protected string _Content;
            
            protected string _Email;
            
            protected bool _IsPrivate;
            
            protected string _Nick;
            
            protected global::System.DateTime _PostTime;
            
    		public static bool operator ==(global::Entities.Message left, global::Entities.Message right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Message left, global::Entities.Message right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string AdminFeedback {
                get {
                    return this._AdminFeedback;
                }
                set {
                    this.OnPropertyChanged("AdminFeedback", this._AdminFeedback, value);
                    this._AdminFeedback = value;
                }
            }
            
            public global::System.DateTime? AdminFeedbackTime {
                get {
                    return this._AdminFeedbackTime;
                }
                set {
                    this.OnPropertyChanged("AdminFeedbackTime", this._AdminFeedbackTime, value);
                    this._AdminFeedbackTime = value;
                }
            }
            
            public string Content {
                get {
                    return this._Content;
                }
                set {
                    this.OnPropertyChanged("Content", this._Content, value);
                    this._Content = value;
                }
            }
            
            public string Email {
                get {
                    return this._Email;
                }
                set {
                    this.OnPropertyChanged("Email", this._Email, value);
                    this._Email = value;
                }
            }
            
            public bool IsPrivate {
                get {
                    return this._IsPrivate;
                }
                set {
                    this.OnPropertyChanged("IsPrivate", this._IsPrivate, value);
                    this._IsPrivate = value;
                }
            }
            
            public string Nick {
                get {
                    return this._Nick;
                }
                set {
                    this.OnPropertyChanged("Nick", this._Nick, value);
                    this._Nick = value;
                }
            }
            
            public global::System.DateTime PostTime {
                get {
                    return this._PostTime;
                }
                set {
                    this.OnPropertyChanged("PostTime", this._PostTime, value);
                    this._PostTime = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Message._MessageEntityConfiguration == null)) {
                    Message._MessageEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Message");
                }
                return Message._MessageEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._AdminFeedback,
                        this._AdminFeedbackTime,
                        this._Content,
                        this._Email,
                        this._IsPrivate,
                        this._Nick,
                        this._PostTime};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._AdminFeedback = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._AdminFeedbackTime = ((System.DateTime?)(reader.GetValue(2)));
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Content = reader.GetString(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Email = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._IsPrivate = reader.GetBoolean(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._Nick = reader.GetString(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._PostTime = reader.GetDateTime(7);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._AdminFeedback = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._AdminFeedbackTime = ((System.Nullable<System.DateTime>)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Content = ((string)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Email = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._IsPrivate = ((bool)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._Nick = ((string)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._PostTime = ((System.DateTime)(row[7]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Message).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Message)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Message)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem AdminFeedback = new NBear.Common.PropertyItem("AdminFeedback");
                
                public static NBear.Common.PropertyItem AdminFeedbackTime = new NBear.Common.PropertyItem("AdminFeedbackTime");
                
                public static NBear.Common.PropertyItem Content = new NBear.Common.PropertyItem("Content");
                
                public static NBear.Common.PropertyItem Email = new NBear.Common.PropertyItem("Email");
                
                public static NBear.Common.PropertyItem IsPrivate = new NBear.Common.PropertyItem("IsPrivate");
                
                public static NBear.Common.PropertyItem Nick = new NBear.Common.PropertyItem("Nick");
                
                public static NBear.Common.PropertyItem PostTime = new NBear.Common.PropertyItem("PostTime");
                
                private _() {
                }
            }
        }
    }
