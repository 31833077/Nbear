<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NBear.Common</name>
    </assembly>
    <members>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptObject">
            <summary>
            Represents a JavaScript object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptObject.#ctor(Newtonsoft.Json.JavaScriptObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class that
            contains values copied from the specified <see cref="T:Newtonsoft.Json.JavaScriptObject"/>.
            </summary>
            <param name="javaScriptObject">The <see cref="T:Newtonsoft.Json.JavaScriptObject"/> whose elements are copied to the new object.</param>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptConvert">
            <summary>
            Provides methods for converting between common language runtime types and JavaScript types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimter">The string delimiter character.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="T:NBear.Common.MetaDataManager">
            <summary>
            The entity meta data manager.
            </summary>
        </member>
        <member name="M:NBear.Common.MetaDataManager.#cctor">
            <summary>
            Initializes the <see cref="T:NBear.Common.MetaDataManager"/> class.
            </summary>
        </member>
        <member name="M:NBear.Common.MetaDataManager.GetEntityConfiguration(System.String)">
            <summary>
            Gets the entity configuration.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>The entity configuration</returns>
        </member>
        <member name="M:NBear.Common.MetaDataManager.GetChildEntityConfigurations(System.String)">
            <summary>
            Gets the child entity configurations.
            </summary>
            <param name="baseTypeName">Name of the base type.</param>
            <returns>The entity configurations.</returns>
        </member>
        <member name="M:NBear.Common.MetaDataManager.IsLazyLoad(System.String,System.String)">
            <summary>
            Determines whether a specified property of an entity is lazyload.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            	<c>true</c> if is lazy load ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NBear.Common.MetaDataManager.IsNonRelatedEntity(System.String)">
            <summary>
            Determines whether the specified entity is non related entity, a non related entity is an entity without base/child entities and related contained query properties.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>Wthether true.</returns>
        </member>
        <member name="M:NBear.Common.MetaDataManager.GetEntityAutoId(System.String)">
            <summary>
            Gets name of the entity's auto id column.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>The auto id column name.</returns>
        </member>
        <member name="M:NBear.Common.MetaDataManager.GetByteArrayColumns(System.String)">
            <summary>
            Gets the byte array type columns.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>The columns.</returns>
        </member>
        <member name="M:NBear.Common.MetaDataManager.GetNullableNumberColumns(System.String)">
            <summary>
            Gets the nullable number columns.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.MetaDataManager.GetSqlTypeWithDefaultValueColumns(System.String)">
            <summary>
            Gets the sqltype with default value columns.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:NBear.Common.EntityConfigurationSection">
            <summary>
            The entity configuration section.
            </summary>
        </member>
        <member name="P:NBear.Common.EntityConfigurationSection.Encrpyt">
            <summary>
            Whether encrpyted entity config file.
            </summary>
        </member>
        <member name="P:NBear.Common.EntityConfigurationSection.Key">
            <summary>
            The encrpyt/decrypt key.
            </summary>
        </member>
        <member name="P:NBear.Common.EntityConfigurationSection.Includes">
            <summary>
            Gets or sets the includes.
            </summary>
            <value>The includes.</value>
        </member>
        <member name="T:NBear.Common.EntityConfiguration">
            <summary>
            An entity configuration
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.Name">
            <summary>
            Name of entity.
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.Commnet">
            <summary>
            Commnet of entity
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.IsReadOnly">
            <summary>
            Whether the entity is readonly.
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.IsAutoPreLoad">
            <summary>
            Whether instances of the entity are automatically preloaded.
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.IsBatchUpdate">
            <summary>
            Whether the entity is save all property related values in a batch to improve performance.
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.IsRelation">
            <summary>
            Whether the entity is a relation type.
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.BaseEntity">
            <summary>
            Base entity of this entity.
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.CustomData">
            <summary>
            Custom data.
            </summary>
        </member>
        <member name="F:NBear.Common.EntityConfiguration.AdditionalSqlScript">
            <summary>
            Combined additional sql script clips which will be included into the sql script batch.
            </summary>
        </member>
        <member name="M:NBear.Common.EntityConfiguration.GetPropertyConfiguration(System.String)">
            <summary>
            Gets the property configuration.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property configuration</returns>
        </member>
        <member name="M:NBear.Common.EntityConfiguration.Add(NBear.Common.PropertyConfiguration)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:NBear.Common.EntityConfiguration.GetMappingColumnNames(System.String[])">
            <summary>
            Gets the mapping column names.
            </summary>
            <param name="propertyNames">The property names.</param>
            <returns>The column names.</returns>
        </member>
        <member name="M:NBear.Common.EntityConfiguration.GetMappingColumnName(System.String)">
            <summary>
            Gets the name of the mapping column.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The column names.</returns>
        </member>
        <member name="P:NBear.Common.EntityConfiguration.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:NBear.Common.EntityConfiguration.ViewName">
            <summary>
            Gets the name of the view to select data.
            </summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:NBear.Common.EntityConfiguration.BatchSize">
            <summary>
            The batch size when an entity is marked as IsBatchUpdate.
            </summary>
        </member>
        <member name="P:NBear.Common.EntityConfiguration.Properties">
            <summary>
            Gets or sets the properties configuration.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:NBear.Common.PropertyConfiguration">
            <summary>
            A property configuration.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.Commnet">
            <summary>
            Commnet of entity
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.PropertyType">
            <summary>
            Type of the property.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsInherited">
            <summary>
            Whether the property is inherited from a base entity.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.SqlDefaultValue">
            <summary>
            The sql default value
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsReadOnly">
            <summary>
            Whether the property is readonly.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsCompoundUnit">
            <summary>
            Whether the property is a CompoundUnit.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsContained">
            <summary>
            Whether the property is a contained property, which means if the entity saved or deleted, all contained property will be included in update object list.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsQueryProperty">
            <summary>
            Whether this property is a query property.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsFriendKey">
            <summary>
            Whether a property is a friend DEFAULT_KEY.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsLazyLoad">
            <summary>
            Whether the property is a lazyload query property. It is only used by query entity.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.QueryWhere">
            <summary>
            The where condition used by query property.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.QueryType">
            <summary>
            The type of the query property.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.QueryOrderBy">
            <summary>
            The order by condition used by query property.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsRelationKey">
            <summary>
            Whether the property is a relationkey. It is only used by relation entity.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.RelatedType">
            <summary>
            The related entity type of this relationkey. It is only used by relation entity.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.RelationType">
            <summary>
            The relation type of the query property.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.RelatedForeignKey">
            <summary>
            The related entity type's foreignkey relating to this relationkey. It is only used by relation entity.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsIndexProperty">
            <summary>
            Whether need to add index for the property when creating the table in database.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsIndexPropertyDesc">
            <summary>
            Whether the index property is desc.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.IsSerializationIgnore">
            <summary>
            Whether this property should not included in default XML serialization.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyConfiguration.CustomData">
            <summary>
            Custom data.
            </summary>
        </member>
        <member name="P:NBear.Common.PropertyConfiguration.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:NBear.Common.PropertyConfiguration.PropertyMappingColumnType">
            <summary>
            Gets or sets the type of the property mapping column.
            </summary>
            <value>The type of the property mapping column.</value>
        </member>
        <member name="P:NBear.Common.PropertyConfiguration.SqlType">
            <summary>
            Gets or sets the mapping sql type.
            </summary>
            <value>The type of the SQL.</value>
        </member>
        <member name="P:NBear.Common.PropertyConfiguration.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is primary DEFAULT_KEY.
            </summary>
            <value>
            	<c>true</c> if this instance is primary DEFAULT_KEY; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NBear.Common.PropertyConfiguration.IsNotNull">
            <summary>
            whether the property could not be NULL.
            </summary>
        </member>
        <member name="T:NBear.Common.CouldNotLoadEntityConfigurationException">
            <summary>
            CouldNotLoadEntityConfigurationException
            </summary>
        </member>
        <member name="M:NBear.Common.CouldNotLoadEntityConfigurationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.CouldNotLoadEntityConfigurationException"/> class.
            </summary>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:NBear.Common.TypeIsNotASubClassOfEntityException">
            <summary>
            TypeIsNotASubClassOfEntityException
            </summary>
        </member>
        <member name="T:NBear.Common.CouldNotFoundEntityConfigurationOfEntityException">
            <summary>
            CouldNotFoundEntityConfigurationOfEntityException
            </summary>
        </member>
        <member name="M:NBear.Common.CouldNotFoundEntityConfigurationOfEntityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.CouldNotFoundEntityConfigurationOfEntityException"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="T:NBear.Common.JSON.JSONUtils">
            <summary>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
             Ported to C# by Are Bjolseth, teleplan.no
            </summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONUtils.Enquote(System.String)">
            <summary>
            Produce a string in double quotes with backslash sequences in all the right places.
            </summary>
            <param name="s">A String</param>
            <returns>A String correctly formatted for insertion in a JSON message.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:NBear.Common.Util">
            <summary>
            The Util class.
            </summary>
        </member>
        <member name="M:NBear.Common.Util.DefaultValue``1">
            <summary>
            Gets the default value of a specified Type.
            </summary>
            <returns>The default value.</returns>
        </member>
        <member name="M:NBear.Common.Util.DefaultValue(System.Type)">
            <summary>
            Gets the default value of a specified Type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Util.DeepGetProperties(System.Type[])">
            <summary>
            Deeply gets property infos.
            </summary>
            <param name="types">The types.</param>
            <returns>Property infos of all the types and there base classes/interfaces</returns>
        </member>
        <member name="M:NBear.Common.Util.GetOriginalTypeOfArrayType(System.Type)">
            <summary>
            Gets the type of the original type of array.
            </summary>
            <param name="returnType">Type of the return.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Util.GetType(System.String)">
            <summary>
            Gets a type in all loaded assemblies of current app domain.
            </summary>
            <param name="fullName">The full name.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Util.DeepGetProperty(System.Type,System.String)">
            <summary>
            Deeply get property info from specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Util.DeepGetField(System.Type,System.String,System.Boolean)">
            <summary>
            Deeps the get field from specific type.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="isPublic">if is public.</param>
            <returns>The field info</returns>
        </member>
        <member name="M:NBear.Common.Util.ParseRelativePath(System.String,System.String)">
            <summary>
            Parses the relative path to absolute path.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="relativePath">The relative path.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Util.FormatParamVal(System.Object)">
            <summary>
            Formats the param val.
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="T:NBear.Common.JSON.JSONTokener">
            <summary>
            <para>
             A JSONTokener takes a source string and extracts characters and tokens from
             it. It is used by the JSONObject and JSONArray constructors to parse
             JSON source strings.
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
             </para>
             <para>Ported to C# by Are Bjolseth, teleplan.no</para>
             <para>
             <list type="bullet">
             <item><description>Implement Custom exceptions</description></item>
             <item><description>Add unit testing</description></item>
             <item><description>Add log4net</description></item>
             </list>
             </para>
            </summary>
        </member>
        <member name="F:NBear.Common.JSON.JSONTokener.myIndex">
            <summary>The index of the next character.</summary>
        </member>
        <member name="F:NBear.Common.JSON.JSONTokener.mySource">
            <summary>The source string being tokenized.</summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.#ctor(System.String)">
            <summary>
            Construct a JSONTokener from a string.
            </summary>
            <param name="s">A source string.</param>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.back">
            <summary>
            Back up one character. This provides a sort of lookahead capability,
            so that you can test for a digit or letter before attempting to parse
            the next number or identifier.
            </summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.dehexchar(System.Char)">
            <summary>
            Get the hex value of a character (base16).
            </summary>
            <param name="c">
            A character between '0' and '9' or between 'A' and 'F' or
            between 'a' and 'f'.
            </param>
            <returns>An int between 0 and 15, or -1 if c was not a hex digit.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.more">
            <summary>
            Determine if the source string still contains characters that next() can consume.
            </summary>
            <returns>true if not yet at the end of the source.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.next">
            <summary>
            Get the next character in the source string.
            </summary>
            <returns>The next character, or 0 if past the end of the source string.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.next(System.Char)">
            <summary>
            Consume the next character, and check that it matches a specified character
            </summary>
            <param name="c">The character to match.</param>
            <returns>The character.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.next(System.Int32)">
            <summary>
            Get the next n characters.
            </summary>
            <param name="n">The number of characters to take.</param>
            <returns>A string of n characters.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.nextClean">
            <summary>
            Get the next char in the string, skipping whitespace
            and comments (slashslash and slashstar).
            </summary>
            <returns>A character, or 0 if there are no more characters.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.nextString(System.Char)">
            <summary>
            Return the characters up to the next close quote character.
            Backslash processing is done. The formal JSON format does not
            allow strings in single quotes, but an implementation is allowed to
            accept them.
            </summary>
            <param name="quote">The quoting character, either " or '</param>
            <returns>A String.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.nextTo(System.Char)">
            <summary>
            Get the text up but not including the specified character or the
            end of line, whichever comes first.
            </summary>
            <param name="d">A delimiter character.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.nextTo(System.String)">
            <summary>
             Get the text up but not including one of the specified delimeter
             characters or the end of line, which ever comes first.
            </summary>
            <param name="delimiters">A set of delimiter characters.</param>
            <returns>A string, trimmed.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.nextObject">
            <summary>
            Get the next value as object. The value can be a Boolean, Double, Integer,
            JSONArray, JSONObject, or String, or the JSONObject.NULL object.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.skipTo(System.Char)">
            <summary>
            Skip characters until the next character is the requested character.
            If the requested character is not found, no characters are skipped.
            </summary>
            <param name="to">A character to skip to.</param>
            <returns>
            The requested character, or zero if the requested character is not found.
            </returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.skipPast(System.String)">
            <summary>
            Skip characters until past the requested string.
            If it is not found, we are left at the end of the source.
            </summary>
            <param name="to">A string to skip past.</param>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.ToString">
            <summary>
            Make a printable string of this JSONTokener.
            </summary>
            <returns>" at character [myIndex] of [mySource]"</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.unescape">
            <summary>
            Unescape the source text. Convert %hh sequences to single characters,
            and convert plus to space. There are Web transport systems that insist on
            doing unnecessary URL encoding. This provides a way to undo it.
            </summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONTokener.unescape(System.String)">
            <summary>
            Convert %hh sequences to single characters, and convert plus to space.
            </summary>
            <param name="s">A string that may contain plus and %hh sequences.</param>
            <returns>The unescaped string.</returns>
        </member>
        <member name="T:NBear.Common.CryptographyManager">
            <summary>
            Common CryptographyManager
            </summary>
        </member>
        <member name="F:NBear.Common.CryptographyManager.DEFAULT_KEY">
            <summary>
            The default encrypt key.
            </summary>
        </member>
        <member name="M:NBear.Common.CryptographyManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.CryptographyManager"/> class.
            </summary>
        </member>
        <member name="M:NBear.Common.CryptographyManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.CryptographyManager"/> class.
            </summary>
            <param name="legalIVKey">The legal IV key.</param>
        </member>
        <member name="M:NBear.Common.CryptographyManager.SymmetricEncrpyt(System.String,System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Symmetrics encrpyt.
            </summary>
            <param name="str">The STR to encrpyt.</param>
            <param name="mobjCryptoService">A concrete symmetric algorithm.</param>
            <param name="key">The key.</param>
            <returns>The encrpyt str.</returns>
        </member>
        <member name="M:NBear.Common.CryptographyManager.SymmetricDecrpyt(System.String,System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Symmetrics decrpyt.
            </summary>
            <param name="str">The STR to decrpyt.</param>
            <param name="mobjCryptoService">A concrete symmetric algorithm.</param>
            <param name="key">The key.</param>
            <returns>The decrpyted str.</returns>
        </member>
        <member name="M:NBear.Common.CryptographyManager.ComputeHash(System.String)">
            <summary>
            Computes the hash.
            </summary>
            <param name="str">The STR to compute hash value.</param>
            <returns>The hash value.</returns>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader"/> if a <see cref="M:Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An interger.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Constructor">
            <summary>
            A JavaScript object constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="T:NBear.Common.JSON.JSONObject">
             <summary>
             <para>
             A JSONArray is an ordered sequence of values. Its external form is a string
             wrapped in square brackets with commas between the values. The internal form
             is an object having get() and opt() methods for accessing the values by
             index, and put() methods for adding or replacing values. The values can be
             any of these types: Boolean, JSONArray, JSONObject, Number, String, or the
             JSONObject.NULL object.
             </para>
             <para>
             The constructor can convert a JSON external form string into an
             internal form Java object. The toString() method creates an external
             form string.
             </para>
             <para>
             A get() method returns a value if one can be found, and throws an exception
             if one cannot be found. An opt() method returns a default value instead of
             throwing an exception, and so is useful for obtaining optional values.
             </para>
             <para>
             The generic get() and opt() methods return an object which you can cast or
             query for type. There are also typed get() and opt() methods that do typing
             checking and type coersion for you.
            </para>
             <para>
             The texts produced by the toString() methods are very strict.
             The constructors are more forgiving in the texts they will accept.
             </para>
             <para>
             <list type="bullet">
             <item><description>An extra comma may appear just before the closing bracket.</description></item>
             <item><description>Strings may be quoted with single quotes.</description></item>
             <item><description>Strings do not need to be quoted at all if they do not contain leading
                 or trailing spaces, and if they do not contain any of these characters:
                 { } [ ] / \ : , </description></item>
             <item><description>Numbers may have the 0- (octal) or 0x- (hex) prefix.</description></item>
             </list>
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
            </para>
             Ported to C# by Are Bjolseth, teleplan.no
             TODO:
             1. Implement Custom exceptions
             2. Add indexer JSONObject[i] = object,     and object = JSONObject[i];
             3. Add indexer JSONObject["key"] = object, and object = JSONObject["key"]
             4. Add unit testing
             5. Add log4net
             6. Make get/put methods private, to force use of indexer instead?
             </summary>
        </member>
        <member name="F:NBear.Common.JSON.JSONObject.myHashMap">
            <summary>The hash map where the JSONObject's properties are kept.</summary>
        </member>
        <member name="F:NBear.Common.JSON.JSONObject.myKeyIndexList">
            <summary>A shadow list of keys to enable access by sequence of insertion</summary>
        </member>
        <member name="F:NBear.Common.JSON.JSONObject.NULL">
            <summary>
            It is sometimes more convenient and less ambiguous to have a NULL
            object than to use C#'s null value.
            JSONObject.NULL.toString() returns "null".
            </summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.#ctor">
            <summary>
             Construct an empty JSONObject.
            </summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.#ctor(NBear.Common.JSON.JSONTokener)">
            <summary>
            Construct a JSONObject from a JSONTokener.
            </summary>
            <param name="x">A JSONTokener object containing the source string.</param>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.#ctor(System.String)">
            <summary>
            Construct a JSONObject from a string.
            </summary>
            <param name="sJSON">A string beginning with '{' and ending with '}'.</param>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.#ctor(System.Collections.IDictionary)">
            <summary>
            Construct a JSONObject from a IDictionary
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.accumulate(System.String,System.Object)">
            <summary>
            Accumulate values under a key. It is similar to the put method except
            that if there is already an object stored under the key then a
            JSONArray is stored under the key to hold all of the accumulated values.
            If there is already a JSONArray, then the new value is appended to it.
            In contrast, the put method replaces the previous value.
            </summary>
            <param name="key">A key string.</param>
            <param name="val">An object to be accumulated under the key.</param>
            <returns>this</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.getDictionary">
            <summary>
            C# convenience method
            </summary>
            <returns>The Hashtable</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.getValue(System.String)">
            <summary>
            Alias to Java get method
            Get the value object associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>The object associated with the key.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.getJSONArray(System.String)">
            <summary>
            Get the JSONArray value associated with a key.
            </summary>
            <param name="key">A key string</param>
            <returns>A JSONArray which is the value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.getJSONObject(System.String)">
            <summary>
            Get the JSONObject value associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>A JSONObject which is the value.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.getString(System.String)">
            <summary>
            Get the string associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.has(System.String)">
            <summary>
            Determine if the JSONObject contains a specific key.
            </summary>
            <param name="key">A key string.</param>
            <returns>true if the key exists in the JSONObject.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.keys">
            <summary>
            Get an enumeration of the keys of the JSONObject.
            Added to be true to orginal Java implementation
            Indexers are easier to use
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.isNull(System.String)">
            <summary>
            Determine if the value associated with the key is null or if there is no value.
            </summary>
            <param name="key">A key string</param>
            <returns>true if there is no value associated with the key or if the valus is the JSONObject.NULL object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.Length">
            <summary>
            Get the number of keys stored in the JSONObject.
            </summary>
            <returns>The number of keys in the JSONObject.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.names">
            <summary>
            Produce a JSONArray containing the names of the elements of this JSONObject
            </summary>
            <returns>A JSONArray containing the key strings, or null if the JSONObject</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.opt(System.String)">
            <summary>
            Get an optional value associated with a key.
            </summary>
            <param name="key">A key string</param>
            <returns>An object which is the value, or null if there is no value.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optBoolean(System.String)">
            <summary>
            Get an optional value associated with a key.
            It returns false if there is no such key, or if the value is not
            Boolean.TRUE or the String "true".
            </summary>
            <param name="key">A key string.</param>
            <returns>bool value object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optBoolean(System.String,System.Boolean)">
            <summary>
            Get an optional value associated with a key.
            It returns false if there is no such key, or if the value is not
            Boolean.TRUE or the String "true".
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The preferred return value if conversion fails</param>
            <returns>bool value object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optDouble(System.String)">
            <summary>
            Get an optional double associated with a key,
            or NaN if there is no such key or if its value is not a number.
            If the value is a string, an attempt will be made to evaluate it as
            a number.
            </summary>
            <param name="key">A string which is the key.</param>
            <returns>A double value object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optDouble(System.String,System.Double)">
            <summary>
            Get an optional double associated with a key,
            or NaN if there is no such key or if its value is not a number.
            If the value is a string, an attempt will be made to evaluate it as
            a number.
            </summary>
            <param name="key">A string which is the key.</param>
            <param name="defaultValue">The default</param>
            <returns>A double value object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optInt(System.String)">
            <summary>
             Get an optional double associated with a key, or the
             defaultValue if there is no such key or if its value is not a number.
             If the value is a string, an attempt will be made to evaluate it as
             number.
            </summary>
            <param name="key">A key string.</param>
            <returns>An int object value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optInt(System.String,System.Int32)">
            <summary>
             Get an optional double associated with a key, or the
             defaultValue if there is no such key or if its value is not a number.
             If the value is a string, an attempt will be made to evaluate it as
             number.
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The default value</param>
            <returns>An int object value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optJSONArray(System.String)">
            <summary>
            Get an optional JSONArray associated with a key.
            It returns null if there is no such key, or if its value is not a JSONArray
            </summary>
            <param name="key">A key string</param>
            <returns>A JSONArray which is the value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optJSONObject(System.String)">
            <summary>
            Get an optional JSONObject associated with a key.
            It returns null if there is no such key, or if its value is not a JSONObject.
            </summary>
            <param name="key">A key string.</param>
            <returns>A JSONObject which is the value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optString(System.String)">
            <summary>
            Get an optional string associated with a key.
            It returns an empty string if there is no such key. If the value is not
            a string and is not null, then it is coverted to a string.
            </summary>
            <param name="key">A key string.</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.optString(System.String,System.String)">
            <summary>
            Get an optional string associated with a key.
            It returns the defaultValue if there is no such key.
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The default</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.put(System.String,System.Object)">
            <summary>
            Put a key/value pair in the JSONObject. If the value is null,
            then the key will be removed from the JSONObject if it is present.
            </summary>
            <param name="key"> A key string.</param>
            <param name="val">
            An object which is the value. It should be of one of these
            types: Boolean, Double, Integer, JSONArray, JSONObject, String, or the
            JSONObject.NULL object.
            </param>
            <returns>JSONObject</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.putOpt(System.String,System.Object)">
            <summary>
            Add a key value pair
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.remove(System.String)">
            <summary>
            Remove a object assosiateted with the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.toJSONArray(NBear.Common.JSON.JSONArray)">
            <summary>
            Append an array of JSONObjects to current object
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.ToString">
            <summary>
            Overridden to return a JSON formattet object as a string
            </summary>
            <returns>JSON object as formatted string</returns>
        </member>
        <member name="P:NBear.Common.JSON.JSONObject.Item(System.Int32)">
            <summary>
            Return the key for the associated index
            </summary>
        </member>
        <member name="P:NBear.Common.JSON.JSONObject.Item(System.String)">
            <summary>
            Get/Add an object with the associated key
            </summary>
        </member>
        <member name="P:NBear.Common.JSON.JSONObject.Count">
            <summary>
            Return the number of JSON items in hashtable
            </summary>
        </member>
        <member name="T:NBear.Common.JSON.JSONObject.JSONNull">
            <summary>
            Make a Null object
            JSONObject.NULL is equivalent to the value that JavaScript calls null,
            whilst C#'s null is equivalent to the value that JavaScript calls undefined.
            </summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONObject.JSONNull.ToString">
            <summary>
            Overriden to return "null"
            </summary>
            <returns>null</returns>
        </member>
        <member name="T:NBear.Common.Entity">
            <summary>
            The base entity class.
            </summary>
        </member>
        <member name="M:NBear.Common.Entity.IsAttached">
            <summary>
            Determines whether this instance is attached. Not attached means an entity is newly created, or the entity is already persisted.
            </summary>
            <returns>
            	<c>true</c> if this instance is attached; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NBear.Common.Entity.Attach">
            <summary>
            Not attached means an entity is newly created, or the entity is already persisted. 
            Set entity's is-attached status as true also means entity's PropertyChanged event SHOULD be raised on property changing.
            </summary>
        </member>
        <member name="M:NBear.Common.Entity.Detach">
            <summary>
            Not attached means an entity is newly created, or the entity is already persisted. 
            Set entity's is-attached status as false also means entity's PropertyChanged event SHOULD NOT be raised on property changing.
            </summary>
        </member>
        <member name="M:NBear.Common.Entity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.Entity"/> class.
            </summary>
        </member>
        <member name="M:NBear.Common.Entity.IsModified">
            <summary>
            Determines whether this entity is modified.
            </summary>
            <returns>
            	<c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NBear.Common.Entity.GetModifiedProperties(System.Type)">
            <summary>
            Gets the modified properties of this entity, not including query properties and properties of base entity's.
            </summary>
            <param name="type">The type.</param>
            <returns>The modified properties</returns>
        </member>
        <member name="M:NBear.Common.Entity.GetModifiedProperties">
            <summary>
            Gets all the modified properties in the entire entity hierachy.
            </summary>
            <returns>All the modified properties</returns>
        </member>
        <member name="M:NBear.Common.Entity.SetModifiedProperties(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sets the modified properties.
            </summary>
            <param name="changedProperties">The changed properties.</param>
        </member>
        <member name="M:NBear.Common.Entity.ResetModifiedPropertyStates">
            <summary>
            Resets the modified property states.
            </summary>
        </member>
        <member name="M:NBear.Common.Entity.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Called when property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldVal">The old val.</param>
            <param name="newVal">The new val.</param>
        </member>
        <member name="M:NBear.Common.Entity.SetAllPropertiesAsModified">
            <summary>
            Sets all property as modified.
            </summary>
        </member>
        <member name="M:NBear.Common.Entity.ReloadQueries(System.Boolean)">
            <summary>
            Reloads all queries properties's value.
            </summary>
            <param name="includeLazyLoadQueries">if set to <c>true</c> [include lazy load queries].</param>
        </member>
        <member name="M:NBear.Common.Entity.GetPrimaryKeyMappingColumnNames(NBear.Common.EntityConfiguration)">
            <summary>
            Gets the primary key mapping column names.
            </summary>
            <param name="ec">The ec.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Entity.GetPropertyMappingColumnNames(NBear.Common.EntityConfiguration)">
            <summary>
            Gets the property mapping column names.
            </summary>
            <param name="ec">The ec.</param>
            <returns>Column names</returns>
        </member>
        <member name="M:NBear.Common.Entity.GetCreatePropertyMappingColumnNames(System.Type)">
            <summary>
            Gets the create property mapping column names.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Entity.GetCreatePropertyMappingColumnNames(NBear.Common.EntityConfiguration)">
            <summary>
            Gets the create property mapping column names.
            </summary>
            <param name="ec">The ec.</param>
            <returns>Column names</returns>
        </member>
        <member name="M:NBear.Common.Entity.GetPropertyMappingColumnNames">
            <summary>
            Gets the create property mapping column names.
            </summary>
            <returns>Column names</returns>
        </member>
        <member name="M:NBear.Common.Entity.GetPropertyValues">
            <summary>
            Gets the property values.
            </summary>
            <returns>The values.</returns>
        </member>
        <member name="M:NBear.Common.Entity.SetPropertyValues(System.Data.IDataReader)">
            <summary>
            Sets the property values.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:NBear.Common.Entity.SetPropertyValues(System.Data.DataRow)">
            <summary>
            Sets the property values.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:NBear.Common.Entity.GetPropertyValues(System.Object,System.String[])">
            <summary>
            Gets the property values.
            </summary>
            <param name="obj">The obj.</param>
            <param name="columnNames">The column names.</param>
            <returns>The values.</returns>
        </member>
        <member name="M:NBear.Common.Entity.GetPrimaryKeyValues(System.Object)">
            <summary>
            Gets the primary DEFAULT_KEY values.
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The obj.</param>
            <returns>The values.</returns>
        </member>
        <member name="M:NBear.Common.Entity.GetCreatePropertyValues(System.Type,System.Object)">
            <summary>
            Gets the create property values.
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The obj.</param>
            <returns>The values.</returns>
        </member>
        <member name="M:NBear.Common.Entity.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:NBear.Common.Entity.SetPropertyLoaded(System.String)">
            <summary>
            Sets the property as loaded.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:NBear.Common.Entity.IsQueryPropertyLoaded(System.String)">
            <summary>
            Determines whether query property is loaded.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
            	<c>true</c> if query property is loaded; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NBear.Common.Entity.SetQueryProxy(NBear.Common.Entity.QueryProxyHandler)">
            <summary>
            Set the actual query proxy handler binded to this entity.
            </summary>
            <param name="onQuery">The on query.</param>
        </member>
        <member name="M:NBear.Common.Entity.Query(System.Type,System.String,NBear.Common.Entity)">
            <summary>
            Queries array of the specified return entity type.
            </summary>
            <param name="returnEntityType">Type of the return entity.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="baseEntity">The base entity.</param>
            <returns>The query result.</returns>
        </member>
        <member name="M:NBear.Common.Entity.QueryOne(System.Type,System.String,NBear.Common.Entity)">
            <summary>
            Queries a single entity instance.
            </summary>
            <param name="returnEntityType">Type of the return entity.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="baseEntity">The base entity.</param>
            <returns>The query result.</returns>
        </member>
        <member name="M:NBear.Common.Entity.GetToDeleteRelatedPropertyObjects">
            <summary>
            Return the dictionary contains all the objects need to be cascade deleted when this object is deleted or saved.
            </summary>
            <returns>The dictionary contains all the objects need to be cascade deleted</returns>
        </member>
        <member name="M:NBear.Common.Entity.GetToSaveRelatedPropertyObjects">
            <summary>
            Gets to save related property objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Entity.ClearToDeleteRelatedPropertyObjects">
            <summary>
            Clears to delete related property objects.
            </summary>
        </member>
        <member name="M:NBear.Common.Entity.ClearToSaveRelatedPropertyObjects">
            <summary>
            Clears to save related property objects.
            </summary>
        </member>
        <member name="M:NBear.Common.Entity.OnQueryOnePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Called when query one property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:NBear.Common.Entity.OnQueryPropertyItemAdd(System.String,System.Object)">
            <summary>
            Called when added item query property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:NBear.Common.Entity.OnQueryPropertyItemRemove(System.String,System.Object)">
            <summary>
            Called when removed item from query property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:NBear.Common.Entity.OnQueryPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Called when query property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValues">The old values.</param>
            <param name="newValues">The new values.</param>
        </member>
        <member name="M:NBear.Common.Entity.BindArrayListEventHandlers(System.String,System.Object)">
            <summary>
            Binds the array list event handlers.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="newValues">The new values.</param>
        </member>
        <member name="M:NBear.Common.Entity.GetEntityConfiguration">
            <summary>
            Gets the entity configuration.
            </summary>
            <returns>The entity configuration</returns>
        </member>
        <member name="M:NBear.Common.Entity.EntityArrayToDataTable``1(``0[])">
            <summary>
            Convert an entity array to a data table.
            </summary>
            <param name="objs">The entity array.</param>
            <returns>The data table.</returns>
        </member>
        <member name="M:NBear.Common.Entity.DataTableToEntityArray``1(System.Data.DataTable,System.Boolean)">
            <summary>
            Data table to entity array.
            </summary>
            <param name="dt">The dt.</param>
            <param name="setEntitiesAsModified">if set to <c>true</c> set entities as modified.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Entity.GetGuid(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the GUID.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Entity.GetGuid(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the GUID.
            </summary>
            <param name="row">The row.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="E:NBear.Common.Entity.PropertyChanged">
            <summary>
            The property changed event.
            </summary>
        </member>
        <member name="T:NBear.Common.Entity.PropertyChangedEventArgs">
            <summary>
            The event arg used by PropertyChanged event.
            </summary>
        </member>
        <member name="P:NBear.Common.Entity.PropertyChangedEventArgs.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:NBear.Common.Entity.PropertyChangedEventArgs.OldValue">
            <summary>
            Gets or sets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:NBear.Common.Entity.PropertyChangedEventArgs.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="T:NBear.Common.Entity.PropertyChangedHandler">
            <summary>
            Delegate stands for a property changed.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:NBear.Common.Entity.QueryProxyHandler">
            <summary>
            The proxy to do actual query property loading.
            </summary>
            <param name="returnEntityType">return type of the query.</param>
            <param name="propertyName">related property name</param>
            <param name="where">where sql clip.</param>
            <param name="orderBy">order by  sql clip.</param>
            <param name="baseEntity">instance of the owner entity.</param>
            <returns>The query result.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:NBear.Common.JSON.JSONArray">
             <summary>
             <para>
             A JSONArray is an ordered sequence of values. Its external form is a string
             wrapped in square brackets with commas between the values. The internal form
             is an object having get() and opt() methods for accessing the values by
             index, and put() methods for adding or replacing values. The values can be
             any of these types: Boolean, JSONArray, JSONObject, Number, String, or the
             JSONObject.NULL object.
             </para>
             <para>
             The constructor can convert a JSON external form string into an
             internal form Java object. The toString() method creates an external
             form string.
             </para>
             <para>
             A get() method returns a value if one can be found, and throws an exception
             if one cannot be found. An opt() method returns a default value instead of
             throwing an exception, and so is useful for obtaining optional values.
             </para>
             <para>
             The generic get() and opt() methods return an object which you can cast or
             query for type. There are also typed get() and opt() methods that do typing
             checking and type coersion for you.
            </para>
             <para>
             The texts produced by the toString() methods are very strict.
             The constructors are more forgiving in the texts they will accept.
             </para>
             <para>
             <list type="bullet">
             <item><description>An extra comma may appear just before the closing bracket.</description></item>
             <item><description>Strings may be quoted with single quotes.</description></item>
             <item><description>Strings do not need to be quoted at all if they do not contain leading
                 or trailing spaces, and if they do not contain any of these characters:
                 { } [ ] / \ : , </description></item>
             <item><description>Numbers may have the 0- (octal) or 0x- (hex) prefix.</description></item>
             </list>
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
            </para>
             Ported to C# by Are Bjolseth, teleplan.no
             TODO:
             1. Implement Custom exceptions
             2. Add indexer JSONObject[i] = object,     and object = JSONObject[i];
             3. Add indexer JSONObject["DEFAULT_KEY"] = object, and object = JSONObject["DEFAULT_KEY"]
             4. Add unit testing
             5. Add log4net
             6. Make get/put methods private, to force use of indexer instead?
             </summary>
        </member>
        <member name="F:NBear.Common.JSON.JSONArray.myArrayList">
            <summary>The ArrayList where the JSONArray's properties are kept.</summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.#ctor">
            <summary>
            Construct an empty JSONArray
            </summary>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.#ctor(NBear.Common.JSON.JSONTokener)">
            <summary>
            Construct a JSONArray from a JSONTokener.
            </summary>
            <param name="x">A JSONTokener</param>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.#ctor(System.String)">
            <summary>
            Construct a JSONArray from a source string.
            </summary>
            <param name="s">A string that begins with '[' and ends with ']'.</param>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a JSONArray from a Collection.
            </summary>
            <param name="collection">A Collection.</param>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.getValue(System.Int32)">
            <summary>
            Get the object value associated with an index.
            Use indexer instead!!! Added to be true to the original Java implementation
            </summary>
            <param name="i">index subscript. The index must be between 0 and length()-1</param>
            <returns>An object value.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.getArrayList">
            <summary>
            Get the ArrayList which is holding the elements of the JSONArray.
            Use the indexer instead!! Added to be true to the orignal Java src
            </summary>
            <returns>The ArrayList</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.getJSONArray(System.Int32)">
            <summary>
            Get the JSONArray associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONArray value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.getJSONObject(System.Int32)">
            <summary>
            Get the JSONObject associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONObject value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.getString(System.Int32)">
            <summary>
            Get the string associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.isNull(System.Int32)">
            <summary>
            Determine if the value is null.
            </summary>
            <param name="i">index subscript</param>
            <returns>true if the value at the index is null, or if there is no value.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.join(System.String)">
            <summary>
            Make a string from the contents of this JSONArray. The separator string
            is inserted between each element.
            Warning: This method assumes that the data structure is acyclical.
            </summary>
            <param name="separator">separator A string that will be inserted between the elements.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.Length">
            <summary>
            Get the length of the JSONArray.
            Added to be true to the original Java implementation
            </summary>
            <returns>Number of JSONObjects in array</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.opt(System.Int32)">
            <summary>
            Get the optional object value associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>object at that index.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optBoolean(System.Int32)">
            <summary>
            Get the optional boolean value associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>The truth</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optBoolean(System.Int32,System.Boolean)">
            <summary>
            Get the optional boolean value associated with an index.
            It returns the defaultValue if there is no value at that index or if it is not
            a Boolean or the String "true" or "false".
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue"></param>
            <returns>The truth.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optDouble(System.Int32)">
            <summary>
            Get the optional double value associated with an index.
            NaN is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <returns>The double value object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optDouble(System.Int32,System.Double)">
            <summary>
            Get the optional double value associated with an index.
            NaN is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue"></param>
            <returns>The double value object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optInt(System.Int32)">
            <summary>
            Get the optional int value associated with an index.
            Zero is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <returns>The int value object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optInt(System.Int32,System.Int32)">
            <summary>
            Get the optional int value associated with an index.
            The defaultValue is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue">The default value</param>
            <returns>The int value object</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optJSONArray(System.Int32)">
            <summary>
            Get the optional JSONArray associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONArray value, or null if the index has no value, or if the value is not a JSONArray.</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optJSONObject(System.Int32)">
            <summary>
            Get the optional JSONObject associated with an index.
            Null is returned if the DEFAULT_KEY is not found, or null if the index has
            no value, or if the value is not a JSONObject.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONObject value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optString(System.Int32)">
            <summary>
            Get the optional string value associated with an index. It returns an
            empty string if there is no value at that index. If the value
            is not a string and is not null, then it is coverted to a string.
            </summary>
            <param name="i">index subscript</param>
            <returns>A String value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.optString(System.Int32,System.String)">
            <summary>
            Get the optional string associated with an index.
            The defaultValue is returned if the DEFAULT_KEY is not found.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue">The default value</param>
            <returns>A string value</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.put(System.Object)">
            OMITTED:
            public JSONArray put(bool val)
            public JSONArray put(double val)
            public JSONArray put(int val)		
            <summary>
            Append an object value.
            </summary>
            <param name="val">An object value.  The value should be a Boolean, Double, Integer, JSONArray, JSObject, or String, or the JSONObject.NULL object</param>
            <returns>this (JSONArray)</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.put(System.Int32,System.Object)">
            <summary>
            Put or replace a boolean value in the JSONArray.
            </summary>
            <param name="i">
            The subscript. If the index is greater than the length of
            the JSONArray, then null elements will be added as necessary to pad it out.
            </param>
            <param name="val">An object value.</param>
            <returns>this (JSONArray)</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.toJSONObject(NBear.Common.JSON.JSONArray)">
            <summary>
            Produce a JSONObject by combining a JSONArray of names with the values
            of this JSONArray.
            </summary>
            <param name="names">
            A JSONArray containing a list of DEFAULT_KEY strings. These will be paired with the values.
            </param>
            <returns>A JSONObject, or null if there are no names or if this JSONArray</returns>
        </member>
        <member name="M:NBear.Common.JSON.JSONArray.ToString">
            <summary>
            Make an JSON external form string of this JSONArray. For compactness, no
            unnecessary whitespace is added.
            </summary>
            <returns>a printable, displayable, transmittable representation of the array.</returns>
        </member>
        <member name="P:NBear.Common.JSON.JSONArray.Item(System.Int32)">
            <summary>
            Alternate to Java get/put method, by using indexer
            </summary>
        </member>
        <member name="P:NBear.Common.JSON.JSONArray.List">
            <summary>
            Alternativ to Java, getArrayList, by using propery
            </summary>
        </member>
        <member name="P:NBear.Common.JSON.JSONArray.Count">
            <summary>
            Get the length of the JSONArray.
            Using a propery instead of method
            </summary>
        </member>
        <member name="T:NBear.Common.PropertyItem">
            <summary>
            A property item stands for a property in strong typed query.
            </summary>
        </member>
        <member name="F:NBear.Common.PropertyItem.All">
            <summary>
            All stands for *, which is only used in Gateway.Count query.
            </summary>
        </member>
        <member name="M:NBear.Common.PropertyItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.PropertyItem"/> class.
            </summary>
        </member>
        <member name="M:NBear.Common.PropertyItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.PropertyItem"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:NBear.Common.PropertyItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Equality(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Inequality(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Equality(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Inequality(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Equality(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Inequality(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_GreaterThan(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator &gt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_LessThan(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator &lt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_GreaterThan(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator &gt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_LessThan(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator &lt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_GreaterThan(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator &gt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_LessThan(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator &lt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_GreaterThanOrEqual(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator &gt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_LessThanOrEqual(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator &lt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_GreaterThanOrEqual(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator &gt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_LessThanOrEqual(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator &lt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_GreaterThanOrEqual(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator &gt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_LessThanOrEqual(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator &lt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Addition(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator +s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Addition(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator +s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Addition(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator +s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Subtraction(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator -s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Subtraction(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator -s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Subtraction(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator -s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Multiply(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Multiply(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Multiply(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Division(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator /s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Division(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator /s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Division(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator /s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Modulus(NBear.Common.PropertyItem,NBear.Common.PropertyItem)">
            <summary>
            Operator %s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Modulus(System.Object,NBear.Common.PropertyItem)">
            <summary>
            Operator %s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_Modulus(NBear.Common.PropertyItem,System.Object)">
            <summary>
            Operator %s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.op_LogicalNot(NBear.Common.PropertyItem)">
            <summary>
            Operator !s the specified left.
            </summary>
            <param name="left">The left.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.Like(System.String)">
            <summary>
            Like operator the specified right.
            </summary>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.Between(System.Object,System.Object)">
            <summary>
            Betweens the specified left and right value.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.In(System.Object[])">
            <summary>
            Whether property value in the specified values.
            </summary>
            <param name="objs">The objs.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseAnd(System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseAnd(NBear.Common.PropertyItem)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseAnd(NBear.Common.PropertyItemParam)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseOr(System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseOr(NBear.Common.PropertyItem)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseOr(NBear.Common.PropertyItemParam)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseExclusiveOr(System.Object)">
            <summary>
            Bitwises the exclusive or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseExclusiveOr(NBear.Common.PropertyItem)">
            <summary>
            Bitwises the exclusive or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.BitwiseExclusiveOr(NBear.Common.PropertyItemParam)">
            <summary>
            Bitwises the exclusive or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItem.ParseExpressionByMetaData(System.String,NBear.Common.PropertyToColumnMapHandler,System.String,System.String,System.String)">
            <summary>
            Parses the expression by entity meta data to actual sql.
            </summary>
            <param name="inStr">The in STR.</param>
            <param name="propertyToColumnMapHandler">The property to column map handler.</param>
            <param name="leftToken">The left token.</param>
            <param name="rightToken">The right token.</param>
            <param name="paramPrefix">The param prefix.</param>
            <returns>The actual sql.</returns>
        </member>
        <member name="P:NBear.Common.PropertyItem.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:NBear.Common.PropertyItem.ColumnName">
            <summary>
            Gets the name of the intermedia column name of the property.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:NBear.Common.PropertyItem.ParamName">
            <summary>
            Gets the name of the param.
            </summary>
            <value>The name of the param.</value>
        </member>
        <member name="P:NBear.Common.PropertyItem.Asc">
            <summary>
            Gets the ascendent order by clip of this property.
            </summary>
            <value>The asc.</value>
        </member>
        <member name="P:NBear.Common.PropertyItem.Desc">
            <summary>
            Gets the descendent order by clip of this property.
            </summary>
            <value>The desc.</value>
        </member>
        <member name="T:NBear.Common.StoredProcedureParamItem">
            <summary>
            A StoredProcedureParamItem stands for a stored procedure param item in strong typed query.
            </summary>
        </member>
        <member name="M:NBear.Common.StoredProcedureParamItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.StoredProcedureParamItem"/> class.
            </summary>
        </member>
        <member name="M:NBear.Common.StoredProcedureParamItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.StoredProcedureParamItem"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:NBear.Common.StoredProcedureParamItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NBear.Common.StoredProcedureParamItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:NBear.Common.StoredProcedureParamItem.op_Equality(NBear.Common.StoredProcedureParamItem,System.Object)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The where clip.</returns>
        </member>
        <member name="M:NBear.Common.StoredProcedureParamItem.op_Inequality(NBear.Common.StoredProcedureParamItem,System.Object)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The where clip.</returns>
        </member>
        <member name="P:NBear.Common.StoredProcedureParamItem.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:NBear.Common.WhereClip">
            <summary>
            Strong typed where clip.
            </summary>
        </member>
        <member name="M:NBear.Common.WhereClip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.WhereClip"/> class.
            </summary>
        </member>
        <member name="M:NBear.Common.WhereClip.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.WhereClip"/> class.
            </summary>
            <param name="whereStr">The where STR.</param>
            <param name="paramValues">The param values.</param>
        </member>
        <member name="M:NBear.Common.WhereClip.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NBear.Common.WhereClip.op_BitwiseAnd(NBear.Common.WhereClip,NBear.Common.WhereClip)">
            <summary>
            And two where clips.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>The where clip.</returns>
        </member>
        <member name="M:NBear.Common.WhereClip.op_True(NBear.Common.WhereClip)">
            <summary>
            Operator trues the specified right.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.WhereClip.op_False(NBear.Common.WhereClip)">
            <summary>
            Operator falses the specified right.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.WhereClip.op_BitwiseOr(NBear.Common.WhereClip,NBear.Common.WhereClip)">
            <summary>
            Or two where clips.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The where clip.</returns>
        </member>
        <member name="M:NBear.Common.WhereClip.op_LogicalNot(NBear.Common.WhereClip)">
            <summary>
            Not the specified where.
            </summary>
            <param name="right">The right.</param>
            <returns>The where clip.</returns>
        </member>
        <member name="P:NBear.Common.WhereClip.All">
            <summary>
            Gets all.
            </summary>
            <value>All.</value>
        </member>
        <member name="P:NBear.Common.WhereClip.ParamValues">
            <summary>
            Gets the param values.
            </summary>
            <value>The param values.</value>
        </member>
        <member name="P:NBear.Common.WhereClip.SerializedData">
            <summary>
            Gets or sets the serialized data. This property is used for serialization only
            </summary>
            <value>The serialized data.</value>
        </member>
        <member name="T:NBear.Common.OrderByClip">
            <summary>
            Strong typed orderby clip.
            </summary>
        </member>
        <member name="M:NBear.Common.OrderByClip.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NBear.Common.OrderByClip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.OrderByClip"/> class.
            </summary>
        </member>
        <member name="M:NBear.Common.OrderByClip.#ctor(NBear.Common.PropertyItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.OrderByClip"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="descend">if set to <c>true</c> [descend].</param>
        </member>
        <member name="M:NBear.Common.OrderByClip.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.OrderByClip"/> class.
            </summary>
            <param name="orderByStr">The order by STR.</param>
        </member>
        <member name="M:NBear.Common.OrderByClip.op_BitwiseAnd(NBear.Common.OrderByClip,NBear.Common.OrderByClip)">
            <summary>
            And two orderby clips.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>The combined order by clip.</returns>
        </member>
        <member name="M:NBear.Common.OrderByClip.op_True(NBear.Common.OrderByClip)">
            <summary>
            Operator trues the specified right.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.OrderByClip.op_False(NBear.Common.OrderByClip)">
            <summary>
            Operator falses the specified right.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:NBear.Common.OrderByClip.Default">
            <summary>
            Gets the default order by condition.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:NBear.Common.OrderByClip.OrderBy">
            <summary>
            Gets or sets the order by str.
            </summary>
            <value>The order by.</value>
        </member>
        <member name="T:NBear.Common.PropertyToColumnMapHandler">
            <summary>
            Delegate used to map a property name to a column name.
            </summary>
            <param name="propertyName"></param>
            <returns>The mapping column name.</returns>
        </member>
        <member name="T:NBear.Common.PropertyItemParam">
            <summary>
            special class used when updating a specified column with value of some other column or combination of several other columns' values.
            </summary>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.PropertyItemParam"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:NBear.Common.PropertyItemParam.CustomValue">
            <summary>
            custom value
            </summary>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Addition(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator +s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Addition(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator +s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Addition(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator +s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Addition(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator +s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Addition(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator +s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Subtraction(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator -s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Subtraction(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator -s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Subtraction(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator -s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Subtraction(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator -s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Subtraction(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator -s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Multiply(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Multiply(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Multiply(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Multiply(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Multiply(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Division(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator /s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Division(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator /s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Division(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator /s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Division(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator /s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Division(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator /s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Modulus(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator %s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Modulus(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator %s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Modulus(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator %s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Modulus(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator %s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Modulus(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator %s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Equality(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Inequality(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Equality(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Inequality(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Equality(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Inequality(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Equality(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Inequality(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Equality(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator ==s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_Inequality(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator !=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThan(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &gt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThan(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &lt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThan(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator &gt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThan(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator &lt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThan(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &gt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThan(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &lt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThan(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator &gt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThan(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator &lt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThan(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &gt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThan(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &lt;s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThanOrEqual(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &gt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThanOrEqual(NBear.Common.PropertyItemParam,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &lt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThanOrEqual(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator &gt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThanOrEqual(NBear.Common.PropertyItemParam,System.Object)">
            <summary>
            Operator &lt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThanOrEqual(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &gt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThanOrEqual(System.Object,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &lt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThanOrEqual(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator &gt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThanOrEqual(NBear.Common.PropertyItemParam,NBear.Common.PropertyItem)">
            <summary>
            Operator &lt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_GreaterThanOrEqual(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &gt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LessThanOrEqual(NBear.Common.PropertyItem,NBear.Common.PropertyItemParam)">
            <summary>
            Operator &lt;=s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.op_LogicalNot(NBear.Common.PropertyItemParam)">
            <summary>
            Operator !s the specified left.
            </summary>
            <param name="left">The left.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.Like(System.String)">
            <summary>
            Like operator the specified right.
            </summary>
            <param name="right">The right.</param>
            <returns>A where clip.</returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.Between(System.Object,System.Object)">
            <summary>
            Betweens the specified left and right value.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.In(System.Object[])">
            <summary>
            Whether property value in the specified values.
            </summary>
            <param name="objs">The objs.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseAnd(System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseAnd(NBear.Common.PropertyItem)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseAnd(NBear.Common.PropertyItemParam)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseOr(System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseOr(NBear.Common.PropertyItem)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseOr(NBear.Common.PropertyItemParam)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseExclusiveOr(System.Object)">
            <summary>
            Bitwises the exclusive or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseExclusiveOr(NBear.Common.PropertyItem)">
            <summary>
            Bitwises the exclusive or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.PropertyItemParam.BitwiseExclusiveOr(NBear.Common.PropertyItemParam)">
            <summary>
            Bitwises the exclusive or.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="T:NBear.Common.EntityArrayQuery`1">
            <summary>
            Strong type query class for entity array
            </summary>
            <typeparam name="EntityType"></typeparam>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Find(System.Object[])">
            <summary>
            Finds the specified entity.
            </summary>
            <param name="pkValues">The pk values.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Find(NBear.Common.WhereClip)">
            <summary>
            Finds the specified entity.
            </summary>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Exists(System.Object[])">
            <summary>
            Existses the specified entity.
            </summary>
            <param name="pkValues">The pk values.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Exists(NBear.Common.WhereClip)">
            <summary>
            Existses the specified entity.
            </summary>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.FindArray">
            <summary>
            Finds all entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.FindArray(NBear.Common.WhereClip)">
            <summary>
            Finds the array.
            </summary>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.FindArray(NBear.Common.WhereClip,NBear.Common.OrderByClip)">
            <summary>
            Finds the array.
            </summary>
            <param name="where">The where.</param>
            <param name="orderBy">The order by.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.FindArray(NBear.Common.OrderByClip)">
            <summary>
            Finds the array.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Avg(NBear.Common.PropertyItem,NBear.Common.WhereClip)">
            <summary>
            Avgs the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Sum(NBear.Common.PropertyItem,NBear.Common.WhereClip)">
            <summary>
            Sums the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Max(NBear.Common.PropertyItem,NBear.Common.WhereClip)">
            <summary>
            MAXs the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Min(NBear.Common.PropertyItem,NBear.Common.WhereClip)">
            <summary>
            MINs the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Count(NBear.Common.PropertyItem,NBear.Common.WhereClip,System.Boolean)">
            <summary>
            Counts the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="where">The where.</param>
            <param name="isDistinct">if set to <c>true</c> [is distinct].</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayQuery`1.Count">
            <summary>
            Counts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NBear.Common.CompressionManager">
            <summary>
            Compress Manager
            </summary>
        </member>
        <member name="M:NBear.Common.CompressionManager.Compress(System.String)">
            <summary>
            Compresses the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.CompressionManager.Decompress(System.String)">
            <summary>
            Decompress the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.CompressionManager.Compress7Zip(System.String)">
            <summary>
            7Zip Compress the str.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.CompressionManager.Decompress7Zip(System.String)">
            <summary>
            7Zip Decompress the str.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="T:NBear.Common.Types.NodeCollection`1">
            <summary>
            Node Collection of a Tree.
            </summary>
            <typeparam name="Element"></typeparam>
        </member>
        <member name="M:NBear.Common.Types.NodeCollection`1.Add(NBear.Common.Types.Node{`0})">
            <summary>
            Adds the specified node to collection.
            </summary>
            <param name="rhs">The RHS.</param>
        </member>
        <member name="M:NBear.Common.Types.NodeCollection`1.Remove(NBear.Common.Types.Node{`0})">
            <summary>
            Removes the specified node from collection.
            </summary>
            <param name="rhs">The RHS.</param>
        </member>
        <member name="M:NBear.Common.Types.NodeCollection`1.Contains(NBear.Common.Types.Node{`0})">
            <summary>
            Determines whether [contains] [the specified node].
            </summary>
            <param name="rhs">The RHS.</param>
            <returns>
            	<c>true</c> if [contains] [the specified RHS]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NBear.Common.Types.NodeCollection`1.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:NBear.Common.Types.NodeCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NBear.Common.Types.NodeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:NBear.Common.Types.NodeCollection`1.Count">
            <summary>
            Gets the node count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:NBear.Common.Types.NodeCollection`1.Owner">
            <summary>
            Gets the owner of this node.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:NBear.Common.Types.NodeCollection`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NBear.Common.Types.Node`1"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:NBear.Common.Types.Node`1">
            <summary>
            A node of a Tree.
            </summary>
            <typeparam name="Element">The related data type of the tree node.</typeparam>
        </member>
        <member name="M:NBear.Common.Types.Node`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.Types.Node`1"/> class.
            </summary>
            <param name="nodedata">The nodedata.</param>
        </member>
        <member name="M:NBear.Common.Types.Node`1.IsAncestorOf(NBear.Common.Types.Node{`0})">
            <summary>
            Determines whether [is ancestor of] [the specified node].
            </summary>
            <param name="rhs">The node.</param>
            <returns>
            	<c>true</c> if [is ancestor of] [the specified node]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NBear.Common.Types.Node`1.IsDescendantOf(NBear.Common.Types.Node{`0})">
            <summary>
            Determines whether [is descendant of] [the specified node].
            </summary>
            <param name="rhs">The node.</param>
            <returns>
            	<c>true</c> if [is descendant of] [the specified node]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NBear.Common.Types.Node`1.DoesShareHierarchyWith(NBear.Common.Types.Node{`0})">
            <summary>
            Doeses the share hierarchy with.
            </summary>
            <param name="rhs">The node.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Types.Node`1.GetDepthFirstEnumerator">
            <summary>
            Gets the depth first enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.Types.Node`1.GetBreadthFirstEnumerator">
            <summary>
            Gets the breadth first enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NBear.Common.Types.Node`1.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:NBear.Common.Types.Node`1.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:NBear.Common.Types.Node`1.Root">
            <summary>
            Gets the root.
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:NBear.Common.Types.Node`1.Data">
            <summary>
            Gets the data of the node.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <!-- 对于成员“F:SevenZip.CoderPropID.PosStateBits”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:SevenZip.CoderPropID.LitContextBits”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:SevenZip.CoderPropID.LitPosBits”忽略有格式错误的 XML 注释 -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MultiThread">
            <summary>
            Specifies multithread mode.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:NBear.Common.SerializationManager">
            <summary>
            The serialization manager.
            </summary>
        </member>
        <member name="M:NBear.Common.SerializationManager.Serialize(System.Object)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.SerializationManager.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.SerializationManager.RegisterSerializeHandler(System.Type,NBear.Common.SerializationManager.TypeSerializeHandler,NBear.Common.SerializationManager.TypeDeserializeHandler)">
            <summary>
            Registers the serialize handler.
            </summary>
            <param name="type">The type.</param>
            <param name="serializeHandler">The serialize handler.</param>
            <param name="deserializeHandler">The deserialize handler.</param>
        </member>
        <member name="M:NBear.Common.SerializationManager.UnregisterSerializeHandler(System.Type)">
            <summary>
            Unregisters the serialize handler.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:NBear.Common.SerializationManager.TypeSerializeHandler">
            <summary>
            The serialize delegate.
            </summary>
            <param name="obj">obj to be serialized.</param>
            <returns></returns>
        </member>
        <member name="T:NBear.Common.SerializationManager.TypeDeserializeHandler">
            <summary>
            The deserialize delegate.
            </summary>
            <param name="data">the data to be deserialied.</param>
            <returns></returns>
        </member>
        <member name="T:NBear.Common.Caching.Cache">
            <summary>
            The Cache class is the traffic cop that prevents 
            resource contention among the different threads in the system. 
            </summary>	
        </member>
        <member name="M:NBear.Common.Caching.Cache.Contains(System.String)">
            <summary>
            Determines whether contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NBear.Common.Caching.Cache.Add(System.String,System.Object)">
            <summary>
            Adds cache with specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The obj.</param>
        </member>
        <member name="M:NBear.Common.Caching.Cache.Add(System.String,System.Object,NBear.Common.Caching.ICacheItemExpiration[])">
            <summary>
            Adds cache with specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The obj.</param>
            <param name="expirations">The expiration strategy.</param>
        </member>
        <member name="M:NBear.Common.Caching.Cache.Remove(System.String)">
            <summary>
            Removes cached object with specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:NBear.Common.Caching.Cache.RemoveByKeyPrefix(System.String)">
            <summary>
            Remove cached objects with specified key prefix.
            </summary>
            <param name="keyPrefix">The key prefix.</param>
        </member>
        <member name="M:NBear.Common.Caching.Cache.Get(System.String)">
            <summary>
            Gets cached obj with specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>the obj</returns>
        </member>
        <member name="M:NBear.Common.Caching.Cache.Clear">
            <summary>
            Flush the cache.
            </summary>
        </member>
        <member name="P:NBear.Common.Caching.Cache.Count">
            <summary>
            Gets the count of cached objects.
            </summary>
            <value>
            The count of cached objects.
            </value>
        </member>
        <member name="T:NBear.Common.Caching.CacheItem">
            <summary>
            This class contains all data important to define an item stored in the cache. It holds both the DEFAULT_KEY and 
            value specified by the user, as well as housekeeping information used internally by this block. It is public, 
            rather than internal, to allow block extenders access to it inside their own implementations of IBackingStore.
            </summary>
        </member>
        <member name="M:NBear.Common.Caching.CacheItem.#ctor(System.String,System.Object,NBear.Common.Caching.ICacheItemExpiration[])">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.Caching.CacheItem"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expirations">The expirations.</param>
        </member>
        <member name="M:NBear.Common.Caching.CacheItem.Replace(System.Object,NBear.Common.Caching.ICacheItemExpiration[])">
            <summary>
            Replaces the internals of the current cache item with the given new values. This is strictly used in the Cache
            class when adding a new item into the cache. By replacing the item's contents, rather than replacing the item
            itself, it allows us to keep a single reference in the cache, simplifying locking.
            </summary>
            <param name="cacheItemData">Value to be stored. May be null.</param>
            <param name="cacheItemExpirations">Param array of ICacheItemExpiration objects. May provide 0 or more of these.</param>
        </member>
        <member name="M:NBear.Common.Caching.CacheItem.GetExpirations">
            <summary>
            Returns array of <see cref="T:NBear.Common.Caching.ICacheItemExpiration"/> objects for this instance.
            </summary>
            <returns>
            An array of <see cref="T:NBear.Common.Caching.ICacheItemExpiration"/> objects.
            </returns>
        </member>
        <member name="M:NBear.Common.Caching.CacheItem.HasExpired">
            <summary>
            Evaluates all cacheItemExpirations associated with this cache item to determine if it 
            should be considered expired. Evaluation stops as soon as any expiration returns true. 
            </summary>
            <returns>True if item should be considered expired, according to policies
            defined in this item's cacheItemExpirations.</returns>
        </member>
        <member name="M:NBear.Common.Caching.CacheItem.TouchedByUserAction(System.Boolean)">
            <summary>
            Intended to be used internally only. This method is called whenever a CacheItem is touched through the action of a user. It
            prevents this CacheItem from being expired or scavenged during an in-progress expiration or scavenging process. It has no effect
            on subsequent expiration or scavenging processes.
            </summary>
        </member>
        <member name="M:NBear.Common.Caching.CacheItem.TouchedByUserAction(System.Boolean,System.DateTime)">
            <summary>
            Intended to be used internally only. This method is called whenever a CacheItem is touched through the action of a user. It
            prevents this CacheItem from being expired or scavenged during an in-progress expiration or scavenging process. It has no effect
            on subsequent expiration or scavenging processes.
            </summary>
        </member>
        <member name="P:NBear.Common.Caching.CacheItem.WillBeExpired">
            <summary>
            Intended to be used internally only. The value should be true when an item is eligible to be expired.
            </summary>
        </member>
        <member name="P:NBear.Common.Caching.CacheItem.Value">
            <summary>
            Returns the cached value of this CacheItem
            </summary>
        </member>
        <member name="P:NBear.Common.Caching.CacheItem.Key">
            <summary>
            Returns the DEFAULT_KEY associated with this CacheItem
            </summary>
        </member>
        <member name="T:NBear.Common.Caching.ICacheItemExpiration">
            <summary>
            Allows end users to implement their own cache item expiration schema.
            </summary>
        </member>
        <member name="M:NBear.Common.Caching.ICacheItemExpiration.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>Returns true if the item has expired, otherwise false.</returns>
        </member>
        <member name="M:NBear.Common.Caching.ICacheItemExpiration.Initialize(NBear.Common.Caching.CacheItem)">
            <summary>
            Called to give the instance the opportunity to initialize itself from information contained in the CacheItem.
            </summary>
            <param name="owningCacheItem">CacheItem that owns this expiration object</param>
        </member>
        <member name="T:NBear.Common.Caching.NeverExpired">
            <summary>
            This class reflects an expiration policy of never being expired.
            </summary>
        </member>
        <member name="M:NBear.Common.Caching.NeverExpired.HasExpired">
            <summary>
            Always returns false
            </summary>
            <returns>False always</returns>
        </member>
        <member name="M:NBear.Common.Caching.NeverExpired.Initialize(NBear.Common.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="T:NBear.Common.Caching.AbsoluteTime">
            <summary>
            This class tests if a data item was expired using a absolute time 
            schema.
            </summary>
        </member>
        <member name="M:NBear.Common.Caching.AbsoluteTime.#ctor(System.DateTime)">
            <summary>
            Create an instance of the class with a time value as input and 
            convert it to UTC.
            </summary>
            <param name="absoluteTime">
            The time to be checked for expiration
            </param>
        </member>
        <member name="M:NBear.Common.Caching.AbsoluteTime.#ctor(System.TimeSpan)">
            <summary>
            Creates an instance based on a time interval starting from now.
            </summary>
            <param name="timeFromNow">Time interval</param>
        </member>
        <member name="M:NBear.Common.Caching.AbsoluteTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <remarks>
            bool isExpired = ICacheItemExpiration.HasExpired();
            </remarks>
            <returns>
            "True", if the data item has expired or "false", if the data item 
            has not expired
            </returns>
        </member>
        <member name="M:NBear.Common.Caching.AbsoluteTime.Initialize(NBear.Common.Caching.CacheItem)">
            <summary>
            Called to give this object an opportunity to initialize itself from data inside a CacheItem
            </summary>
            <param name="owningCacheItem">CacheItem provided to read initialization information from. Will never be null.</param>
        </member>
        <member name="P:NBear.Common.Caching.AbsoluteTime.AbsoluteExpirationTime">
            <summary>
            Gets the absolute expiration time.
            </summary>
            <value>
            The absolute expiration time.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the Json format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into Json.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> that contains the Json structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The type of object to create.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="T:NBear.Common.JSON.JsonFacade">
            <summary>
            Summary description for JsonFacade.
            </summary>
        </member>
        <member name="M:NBear.Common.JSON.JsonFacade.toJSON(System.Collections.IDictionary)">
            <summary>
            Parse a Hashtable and return a JSON formatted string
            </summary>
            <param name="idict"></param>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.JSON.JsonFacade.fromJSON(System.String)">
            <summary>
            Parse JSON formatted string and return a Hashtable
            </summary>
            <param name="sJSON"></param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptArray">
            <summary>
            Represents a JavaScript array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptArray"/> class that
            contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new array.</param>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptArray"/> class that
            is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new array can initially store.</param>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonWriter.Indentation"/> and <see cref="P:Newtonsoft.Json.JsonWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JavaScript manually.
            </summary>
            <param name="javaScript">The raw JavaScript to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how the output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next Json token from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current Json token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
        </member>
        <member name="T:NBear.Common.EntityArrayItemChangeHandler">
            <summary>
            EntityArrayList item change handler, used as callback handlers in EntityArrayLists.
            </summary>
            <param name="propertyName"></param>
            <param name="item">The changed item.</param>
        </member>
        <member name="T:NBear.Common.IEntityArrayList">
            <summary>
            Interface for entity array lists
            </summary>
        </member>
        <member name="M:NBear.Common.IEntityArrayList.GetArrayItemType">
            <summary>
            Gets the type of the array item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NBear.Common.IEntityArrayList.OnAddCallbackHandler">
            <summary>
            Gets or sets the on add callback handler.
            </summary>
            <value>The on add callback handler.</value>
        </member>
        <member name="P:NBear.Common.IEntityArrayList.OnRemoveCallbackHandler">
            <summary>
            Gets or sets the on remove callback handler.
            </summary>
            <value>The on remove callback handler.</value>
        </member>
        <member name="P:NBear.Common.IEntityArrayList.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:NBear.Common.EntityArrayList`1">
            <summary>
            The base generic entity array type.
            </summary>
            <typeparam name="EntityType">entity type</typeparam>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.ToArray">
            <summary>
            Toes the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.AddRange(`0[])">
            <summary>
            Adds a range of entities.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:NBear.Common.EntityArrayList`1.GetArrayItemType">
            <summary>
            Gets the type of the array item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NBear.Common.EntityArrayList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:NBear.Common.EntityArrayList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:NBear.Common.EntityArrayList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:NBear.Common.EntityArrayList`1.OnAddCallbackHandler">
            <summary>
            Gets or sets the on add callback handler.
            </summary>
            <value>The on add callback handler.</value>
        </member>
        <member name="P:NBear.Common.EntityArrayList`1.OnRemoveCallbackHandler">
            <summary>
            Gets or sets the on remove callback handler.
            </summary>
            <value>The on remove callback handler.</value>
        </member>
        <member name="P:NBear.Common.EntityArrayList`1.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:NBear.Common.Check">
            <summary>
            Design By Contract Checks.
            
            Each method generates an exception or
            a trace assertion statement if the contract is broken.
            </summary>
            <remarks>
            This example shows how to call the Require method.
            Assume DBC_CHECK_PRECONDITION is defined.
            <code>
            public void Test(int x)
            {
            	try
            	{
            		Check.Require(x > 1, "x must be > 1");
            	}
            	catch (System.Exception ex)
            	{
            		Console.WriteLine(ex.ToString());
            	}
            }
            </code>
            If you wish to use trace assertion statements, intended for Debug scenarios,
            rather than exception handling then set 
            
            <code>Check.UseAssertions = true</code>
            
            You can specify this in your application entry point and maybe make it
            dependent on conditional compilation flags or configuration file settings, e.g.,
            <code>
            #if DBC_USE_ASSERTIONS
            Check.UseAssertions = true;
            #endif
            </code>
            You can direct output to a Trace listener. For example, you could insert
            <code>
            Trace.Listeners.Clear();
            Trace.Listeners.Add(new TextWriterTraceListener(Console.Out));
            </code>
            
            or direct output to a file or the Event Log.
            
            (Note: For ASP.NET clients use the Listeners collection
            of the Debug, not the Trace, object and, for a Release build, only exception-handling
            is possible.)
            </remarks>
            
        </member>
        <member name="M:NBear.Common.Check.Require(System.Boolean,System.String)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Require(System.Boolean,System.String,System.Exception)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Require(System.Boolean)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Ensure(System.Boolean,System.String)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Ensure(System.Boolean,System.String,System.Exception)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Ensure(System.Boolean)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Invariant(System.Boolean,System.String)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Invariant(System.Boolean,System.String,System.Exception)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Invariant(System.Boolean)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Assert(System.Boolean,System.String)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Assert(System.Boolean,System.String,System.Exception)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:NBear.Common.Check.Assert(System.Boolean)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="P:NBear.Common.Check.UseAssertions">
            <summary>
            Set this if you wish to use Trace Assert statements 
            instead of exception handling. 
            (The Check class uses exception handling by default.)
            </summary>
        </member>
        <member name="P:NBear.Common.Check.UseExceptions">
            <summary>
            Is exception handling being used?
            </summary>
        </member>
        <member name="T:NBear.Common.DesignByContractException">
            <summary>
            Exception raised when a contract is broken.
            Catch this exception type if you wish to differentiate between 
            any DesignByContract exception and other runtime exceptions.
             
            </summary>
        </member>
        <member name="M:NBear.Common.DesignByContractException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.DesignByContractException"/> class.
            </summary>
        </member>
        <member name="M:NBear.Common.DesignByContractException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.DesignByContractException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NBear.Common.DesignByContractException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NBear.Common.DesignByContractException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:NBear.Common.PreconditionException">
            <summary>
            Exception raised when a precondition fails.
            </summary>
        </member>
        <member name="M:NBear.Common.PreconditionException.#ctor">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="M:NBear.Common.PreconditionException.#ctor(System.String)">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="M:NBear.Common.PreconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="T:NBear.Common.PostconditionException">
            <summary>
            Exception raised when a postcondition fails.
            </summary>
        </member>
        <member name="M:NBear.Common.PostconditionException.#ctor">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="M:NBear.Common.PostconditionException.#ctor(System.String)">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="M:NBear.Common.PostconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="T:NBear.Common.InvariantException">
            <summary>
            Exception raised when an invariant fails.
            </summary>
        </member>
        <member name="M:NBear.Common.InvariantException.#ctor">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="M:NBear.Common.InvariantException.#ctor(System.String)">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="M:NBear.Common.InvariantException.#ctor(System.String,System.Exception)">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="T:NBear.Common.AssertionException">
            <summary>
            Exception raised when an assertion fails.
            </summary>
        </member>
        <member name="M:NBear.Common.AssertionException.#ctor">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:NBear.Common.AssertionException.#ctor(System.String)">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:NBear.Common.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptConstructor">
            <summary>
            Represents a JavaScript constructor.
            </summary>
        </member>
        <member name="T:NBear.Common.LogHandler">
            <summary>
            A delegate used for log.
            </summary>
            <param name="logMsg">The msg to write to log.</param>
        </member>
        <member name="T:NBear.Common.ILogable">
            <summary>
            Mark a implementing class as loggable.
            </summary>
        </member>
        <member name="E:NBear.Common.ILogable.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
    </members>
</doc>
