//------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Runtime Version:2.0.50727.42
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    
    namespace ManyToManyImpl2 {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class RoleArrayList : NBear.Common.EntityArrayList<ManyToManyImpl2.Role> {
        }
        
        [System.SerializableAttribute()]
        public partial class Role : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _RoleEntityConfiguration;
            
            protected string _Name;
            
            protected int _Describe;
            
            protected global::System.Guid _ID;
            
            protected int _FID;
            
            protected global::ManyToManyImpl2.UserArrayList _Users;
            
    		public static bool operator ==(global::ManyToManyImpl2.Role left, global::ManyToManyImpl2.Role right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::ManyToManyImpl2.Role left, global::ManyToManyImpl2.Role right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public int Describe {
                get {
                    return this._Describe;
                }
                set {
                    this.OnPropertyChanged("Describe", this._Describe, value);
                    this._Describe = value;
                }
            }
            
            public global::System.Guid ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public int FID {
                get {
                    return this._FID;
                }
                set {
                    this.OnPropertyChanged("FID", this._FID, value);
                    this._FID = value;
                }
            }
            
            public global::ManyToManyImpl2.UserArrayList Users {
                get {
                    if (this.IsQueryPropertyLoaded("Users")) {
                    }
                    else {
                        global::ManyToManyImpl2.UserArrayList _a1;
                        _a1 = new ManyToManyImpl2.UserArrayList();
                        _a1.AddRange(((global::ManyToManyImpl2.User[])(this.Query(typeof(global::ManyToManyImpl2.User), "Users", this))));
                        this.OnQueryPropertyChanged("Users", this._Users, _a1);
                        this._Users = _a1;
                    }
                    if ((this._Users == null)) {
                        global::ManyToManyImpl2.UserArrayList _a1;
                        _a1 = new global::ManyToManyImpl2.UserArrayList();
                        this.BindArrayListEventHandlers("Users", _a1);
                        this._Users = _a1;
                    }
                    return this._Users;
                }
                set {
                    this.OnQueryPropertyChanged("Users", this.Users, value);
                    this._Users = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Role._RoleEntityConfiguration == null)) {
                    Role._RoleEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("ManyToManyImpl2.Role");
                }
                return Role._RoleEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("ManyToManyImpl2.Role", "Users")))) {
                    global::ManyToManyImpl2.UserArrayList _a1;
                    _a1 = new ManyToManyImpl2.UserArrayList();
                    _a1.AddRange(((global::ManyToManyImpl2.User[])(this.Query(typeof(global::ManyToManyImpl2.User), "Users", this))));
                    this.OnQueryPropertyChanged("Users", this._Users, _a1);
                    this._Users = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Name,
                        this._Describe,
                        this._ID,
                        this._FID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Name = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Describe = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._ID = this.GetGuid(reader, 2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._FID = reader.GetInt32(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Name = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Describe = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 2)));
                }
                if ((false == row.IsNull(3))) {
                    this._FID = ((int)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::ManyToManyImpl2.Role).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::ManyToManyImpl2.Role)(obj)).isAttached) 
                            && (this.ID == ((global::ManyToManyImpl2.Role)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Describe = new NBear.Common.PropertyItem("Describe");
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem FID = new NBear.Common.PropertyItem("FID");
                
                private _() {
                }
            }
        }
    }
    namespace ManyToManyImpl2 {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserArrayList : NBear.Common.EntityArrayList<ManyToManyImpl2.User> {
        }
        
        [System.SerializableAttribute()]
        public partial class User : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _UserEntityConfiguration;
            
            protected global::System.Guid _ID;
            
            protected int _FID;
            
            protected global::ManyToManyImpl2.RoleArrayList _Roles;
            
    		public static bool operator ==(global::ManyToManyImpl2.User left, global::ManyToManyImpl2.User right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::ManyToManyImpl2.User left, global::ManyToManyImpl2.User right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public int FID {
                get {
                    return this._FID;
                }
                set {
                    this.OnPropertyChanged("FID", this._FID, value);
                    this._FID = value;
                }
            }
            
            public global::ManyToManyImpl2.RoleArrayList Roles {
                get {
                    if (this.IsQueryPropertyLoaded("Roles")) {
                    }
                    else {
                        global::ManyToManyImpl2.RoleArrayList _a1;
                        _a1 = new ManyToManyImpl2.RoleArrayList();
                        _a1.AddRange(((global::ManyToManyImpl2.Role[])(this.Query(typeof(global::ManyToManyImpl2.Role), "Roles", this))));
                        this.OnQueryPropertyChanged("Roles", this._Roles, _a1);
                        this._Roles = _a1;
                    }
                    if ((this._Roles == null)) {
                        global::ManyToManyImpl2.RoleArrayList _a1;
                        _a1 = new global::ManyToManyImpl2.RoleArrayList();
                        this.BindArrayListEventHandlers("Roles", _a1);
                        this._Roles = _a1;
                    }
                    return this._Roles;
                }
                set {
                    this.OnQueryPropertyChanged("Roles", this.Roles, value);
                    this._Roles = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((User._UserEntityConfiguration == null)) {
                    User._UserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("ManyToManyImpl2.User");
                }
                return User._UserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("ManyToManyImpl2.User", "Roles")))) {
                    global::ManyToManyImpl2.RoleArrayList _a1;
                    _a1 = new ManyToManyImpl2.RoleArrayList();
                    _a1.AddRange(((global::ManyToManyImpl2.Role[])(this.Query(typeof(global::ManyToManyImpl2.Role), "Roles", this))));
                    this.OnQueryPropertyChanged("Roles", this._Roles, _a1);
                    this._Roles = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._FID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._FID = reader.GetInt32(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._FID = ((int)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::ManyToManyImpl2.User).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::ManyToManyImpl2.User)(obj)).isAttached) 
                            && (this.ID == ((global::ManyToManyImpl2.User)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem FID = new NBear.Common.PropertyItem("FID");
                
                private _() {
                }
            }
        }
    }
    namespace ManyToManyImpl2 {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserRolesArrayList : NBear.Common.EntityArrayList<ManyToManyImpl2.UserRoles> {
        }
        
        [System.SerializableAttribute()]
        public partial class UserRoles : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _UserRolesEntityConfiguration;
            
            protected global::System.Guid _RoleID;
            
            protected global::System.Guid _UserID;
            
    		public static bool operator ==(global::ManyToManyImpl2.UserRoles left, global::ManyToManyImpl2.UserRoles right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::ManyToManyImpl2.UserRoles left, global::ManyToManyImpl2.UserRoles right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid RoleID {
                get {
                    return this._RoleID;
                }
                set {
                    this.OnPropertyChanged("RoleID", this._RoleID, value);
                    this._RoleID = value;
                }
            }
            
            public global::System.Guid UserID {
                get {
                    return this._UserID;
                }
                set {
                    this.OnPropertyChanged("UserID", this._UserID, value);
                    this._UserID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((UserRoles._UserRolesEntityConfiguration == null)) {
                    UserRoles._UserRolesEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("ManyToManyImpl2.UserRoles");
                }
                return UserRoles._UserRolesEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._RoleID,
                        this._UserID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._RoleID = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._UserID = this.GetGuid(reader, 1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._RoleID = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._UserID = ((System.Guid)(this.GetGuid(row, 1)));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::ManyToManyImpl2.UserRoles).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return (((this.isAttached && ((global::ManyToManyImpl2.UserRoles)(obj)).isAttached) 
                            && (this.RoleID == ((global::ManyToManyImpl2.UserRoles)(obj)).RoleID)) 
                            && (this.UserID == ((global::ManyToManyImpl2.UserRoles)(obj)).UserID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem RoleID = new NBear.Common.PropertyItem("RoleID");
                
                public static NBear.Common.PropertyItem UserID = new NBear.Common.PropertyItem("UserID");
                
                private _() {
                }
            }
        }
    }
    namespace ManyToManyImpl {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserArrayList : NBear.Common.EntityArrayList<ManyToManyImpl.User> {
        }
        
        [System.SerializableAttribute()]
        public partial class User : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _UserEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::ManyToManyImpl.GroupArrayList _Groups;
            
    		public static bool operator ==(global::ManyToManyImpl.User left, global::ManyToManyImpl.User right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::ManyToManyImpl.User left, global::ManyToManyImpl.User right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::ManyToManyImpl.GroupArrayList Groups {
                get {
                    if (this.IsQueryPropertyLoaded("Groups")) {
                    }
                    else {
                        global::ManyToManyImpl.GroupArrayList _a1;
                        _a1 = new ManyToManyImpl.GroupArrayList();
                        _a1.AddRange(((global::ManyToManyImpl.Group[])(this.Query(typeof(global::ManyToManyImpl.Group), "Groups", this))));
                        this.OnQueryPropertyChanged("Groups", this._Groups, _a1);
                        this._Groups = _a1;
                    }
                    if ((this._Groups == null)) {
                        global::ManyToManyImpl.GroupArrayList _a1;
                        _a1 = new global::ManyToManyImpl.GroupArrayList();
                        this.BindArrayListEventHandlers("Groups", _a1);
                        this._Groups = _a1;
                    }
                    return this._Groups;
                }
                set {
                    this.OnQueryPropertyChanged("Groups", this.Groups, value);
                    this._Groups = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((User._UserEntityConfiguration == null)) {
                    User._UserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("ManyToManyImpl.User");
                }
                return User._UserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("ManyToManyImpl.User", "Groups")))) {
                    global::ManyToManyImpl.GroupArrayList _a1;
                    _a1 = new ManyToManyImpl.GroupArrayList();
                    _a1.AddRange(((global::ManyToManyImpl.Group[])(this.Query(typeof(global::ManyToManyImpl.Group), "Groups", this))));
                    this.OnQueryPropertyChanged("Groups", this._Groups, _a1);
                    this._Groups = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::ManyToManyImpl.User).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::ManyToManyImpl.User)(obj)).isAttached) 
                            && (this.ID == ((global::ManyToManyImpl.User)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace ManyToManyImpl {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class GroupArrayList : NBear.Common.EntityArrayList<ManyToManyImpl.Group> {
        }
        
        [System.SerializableAttribute()]
        public partial class Group : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _GroupEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::ManyToManyImpl.UserArrayList _Users;
            
    		public static bool operator ==(global::ManyToManyImpl.Group left, global::ManyToManyImpl.Group right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::ManyToManyImpl.Group left, global::ManyToManyImpl.Group right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::ManyToManyImpl.UserArrayList Users {
                get {
                    if (this.IsQueryPropertyLoaded("Users")) {
                    }
                    else {
                        global::ManyToManyImpl.UserArrayList _a1;
                        _a1 = new ManyToManyImpl.UserArrayList();
                        _a1.AddRange(((global::ManyToManyImpl.User[])(this.Query(typeof(global::ManyToManyImpl.User), "Users", this))));
                        this.OnQueryPropertyChanged("Users", this._Users, _a1);
                        this._Users = _a1;
                    }
                    if ((this._Users == null)) {
                        global::ManyToManyImpl.UserArrayList _a1;
                        _a1 = new global::ManyToManyImpl.UserArrayList();
                        this.BindArrayListEventHandlers("Users", _a1);
                        this._Users = _a1;
                    }
                    return this._Users;
                }
                set {
                    this.OnQueryPropertyChanged("Users", this.Users, value);
                    this._Users = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Group._GroupEntityConfiguration == null)) {
                    Group._GroupEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("ManyToManyImpl.Group");
                }
                return Group._GroupEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("ManyToManyImpl.Group", "Users")))) {
                    global::ManyToManyImpl.UserArrayList _a1;
                    _a1 = new ManyToManyImpl.UserArrayList();
                    _a1.AddRange(((global::ManyToManyImpl.User[])(this.Query(typeof(global::ManyToManyImpl.User), "Users", this))));
                    this.OnQueryPropertyChanged("Users", this._Users, _a1);
                    this._Users = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::ManyToManyImpl.Group).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::ManyToManyImpl.Group)(obj)).isAttached) 
                            && (this.ID == ((global::ManyToManyImpl.Group)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace ManyToManyImpl {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserGroupArrayList : NBear.Common.EntityArrayList<ManyToManyImpl.UserGroup> {
        }
        
        [System.SerializableAttribute()]
        public partial class UserGroup : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _UserGroupEntityConfiguration;
            
            protected int _UserID;
            
            protected int _GroupID;
            
    		public static bool operator ==(global::ManyToManyImpl.UserGroup left, global::ManyToManyImpl.UserGroup right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::ManyToManyImpl.UserGroup left, global::ManyToManyImpl.UserGroup right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int UserID {
                get {
                    return this._UserID;
                }
                set {
                    this.OnPropertyChanged("UserID", this._UserID, value);
                    this._UserID = value;
                }
            }
            
            public int GroupID {
                get {
                    return this._GroupID;
                }
                set {
                    this.OnPropertyChanged("GroupID", this._GroupID, value);
                    this._GroupID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((UserGroup._UserGroupEntityConfiguration == null)) {
                    UserGroup._UserGroupEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("ManyToManyImpl.UserGroup");
                }
                return UserGroup._UserGroupEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._UserID,
                        this._GroupID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._UserID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._GroupID = reader.GetInt32(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._UserID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._GroupID = ((int)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::ManyToManyImpl.UserGroup).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return (((this.isAttached && ((global::ManyToManyImpl.UserGroup)(obj)).isAttached) 
                            && (this.UserID == ((global::ManyToManyImpl.UserGroup)(obj)).UserID)) 
                            && (this.GroupID == ((global::ManyToManyImpl.UserGroup)(obj)).GroupID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem UserID = new NBear.Common.PropertyItem("UserID");
                
                public static NBear.Common.PropertyItem GroupID = new NBear.Common.PropertyItem("GroupID");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserArrayList : NBear.Common.EntityArrayList<Entities.User> {
        }
        
        /// <summary>
        /// This is a user. ÕâÊÇÒ»¸öUser¡£
        /// </summary>
        [System.SerializableAttribute()]
        public partial class User : NBear.Common.Entity, global::NBear.Test.CaseTests.design.ITemp {
            
            protected static NBear.Common.EntityConfiguration _UserEntityConfiguration;
            
            protected string _Name;
            
            protected global::NBear.Test.CaseTests.shared.UserStatus _Status;
            
            protected global::System.Guid _ID;
            
            protected global::Entities.UserProfile _Profile;
            
            protected global::Entities.GroupArrayList _Groups;
            
            protected global::Entities.Team _Team;
            
            protected global::System.Guid? _Team_ID;
            
    		public static bool operator ==(global::Entities.User left, global::Entities.User right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.User left, global::Entities.User right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::NBear.Test.CaseTests.shared.UserName Name {
                get {
                    return ((NBear.Test.CaseTests.shared.UserName)(NBear.Common.SerializationManager.Deserialize(typeof(NBear.Test.CaseTests.shared.UserName), this._Name)));
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = NBear.Common.SerializationManager.Serialize(value);
                }
            }
            
            public global::NBear.Test.CaseTests.shared.UserStatus Status {
                get {
                    return this._Status;
                }
                set {
                    this.OnPropertyChanged("Status", this._Status, value);
                    this._Status = value;
                }
            }
            
            /// <summary>
            /// This is 
        ///user's ID.
            /// </summary>
            public global::System.Guid ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public global::Entities.UserProfile Profile {
                get {
                    if (this.IsQueryPropertyLoaded("Profile")) {
                    }
                    else {
                        global::Entities.UserProfile _obj;
                        _obj = ((global::Entities.UserProfile)(this.QueryOne(typeof(global::Entities.UserProfile), "Profile", this)));
                        this.OnQueryOnePropertyChanged("Profile", this._Profile, _obj);
                        this._Profile = _obj;
                    }
                    return this._Profile;
                }
                set {
                    this.OnQueryOnePropertyChanged("Profile", this.Profile, value);
                    this._Profile = value;
                }
            }
            
            [System.Xml.Serialization.XmlIgnoreAttribute()]
            public global::Entities.GroupArrayList Groups {
                get {
                    if (this.IsQueryPropertyLoaded("Groups")) {
                    }
                    else {
                        global::Entities.GroupArrayList _a1;
                        _a1 = new Entities.GroupArrayList();
                        _a1.AddRange(((global::Entities.Group[])(this.Query(typeof(global::Entities.Group), "Groups", this))));
                        this.OnQueryPropertyChanged("Groups", this._Groups, _a1);
                        this._Groups = _a1;
                    }
                    if ((this._Groups == null)) {
                        global::Entities.GroupArrayList _a1;
                        _a1 = new global::Entities.GroupArrayList();
                        this.BindArrayListEventHandlers("Groups", _a1);
                        this._Groups = _a1;
                    }
                    return this._Groups;
                }
                set {
                    this.OnQueryPropertyChanged("Groups", this.Groups, value);
                    this._Groups = value;
                }
            }
            
            public global::Entities.Team Team {
                get {
                    if (this.IsQueryPropertyLoaded("Team")) {
                    }
                    else {
                        global::Entities.Team _obj;
                        _obj = ((global::Entities.Team)(this.QueryOne(typeof(global::Entities.Team), "Team", this)));
                        this.OnQueryOnePropertyChanged("Team", this._Team, _obj);
                        this._Team = _obj;
                    }
                    return this._Team;
                }
                set {
                    this.OnQueryOnePropertyChanged("Team", this.Team, value);
                    this._Team = value;
                    if ((value == null)) {
                        this.OnPropertyChanged("Team", this._Team_ID, null);
                        this._Team_ID = null;
                    }
                    else {
                        this.OnPropertyChanged("Team", this._Team_ID, value.ID);
                        this._Team_ID = value.ID;
                    }
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((User._UserEntityConfiguration == null)) {
                    User._UserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.User");
                }
                return User._UserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.User", "Profile")))) {
                    global::Entities.UserProfile _obj;
                    _obj = ((global::Entities.UserProfile)(this.QueryOne(typeof(global::Entities.UserProfile), "Profile", this)));
                    this.OnQueryOnePropertyChanged("Profile", this._Profile, _obj);
                    this._Profile = _obj;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.User", "Groups")))) {
                    global::Entities.GroupArrayList _a1;
                    _a1 = new Entities.GroupArrayList();
                    _a1.AddRange(((global::Entities.Group[])(this.Query(typeof(global::Entities.Group), "Groups", this))));
                    this.OnQueryPropertyChanged("Groups", this._Groups, _a1);
                    this._Groups = _a1;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.User", "Team")))) {
                    global::Entities.Team _obj;
                    _obj = ((global::Entities.Team)(this.QueryOne(typeof(global::Entities.Team), "Team", this)));
                    this.OnQueryOnePropertyChanged("Team", this._Team, _obj);
                    this._Team = _obj;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Name,
                        this._Status,
                        this._ID,
                        this._Team_ID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Name = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Status = ((NBear.Test.CaseTests.shared.UserStatus)(reader.GetValue(1)));
                }
                if ((false == reader.IsDBNull(2))) {
                    this._ID = this.GetGuid(reader, 2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Team_ID = this.GetGuid(reader, 3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Name = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Status = ((NBear.Test.CaseTests.shared.UserStatus)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 2)));
                }
                if ((false == row.IsNull(3))) {
                    this._Team_ID = ((System.Guid)(this.GetGuid(row, 3)));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.User).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.User)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.User)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Status = new NBear.Common.PropertyItem("Status");
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem TeamID = new NBear.Common.PropertyItem("Team");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class GroupArrayList : NBear.Common.EntityArrayList<Entities.Group> {
        }
        
        [System.SerializableAttribute()]
        public partial class Group : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _GroupEntityConfiguration;
            
            protected global::System.Guid _ID;
            
            protected string _Name;
            
            protected bool _IsPublic;
            
            protected global::Entities.UserArrayList _Users;
            
    		public static bool operator ==(global::Entities.Group left, global::Entities.Group right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Group left, global::Entities.Group right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public bool IsPublic {
                get {
                    return this._IsPublic;
                }
                set {
                    this.OnPropertyChanged("IsPublic", this._IsPublic, value);
                    this._IsPublic = value;
                }
            }
            
            public global::Entities.UserArrayList Users {
                get {
                    if (this.IsQueryPropertyLoaded("Users")) {
                    }
                    else {
                        global::Entities.UserArrayList _a1;
                        _a1 = new Entities.UserArrayList();
                        _a1.AddRange(((global::Entities.User[])(this.Query(typeof(global::Entities.User), "Users", this))));
                        this.OnQueryPropertyChanged("Users", this._Users, _a1);
                        this._Users = _a1;
                    }
                    if ((this._Users == null)) {
                        global::Entities.UserArrayList _a1;
                        _a1 = new global::Entities.UserArrayList();
                        this.BindArrayListEventHandlers("Users", _a1);
                        this._Users = _a1;
                    }
                    return this._Users;
                }
                set {
                    this.OnQueryPropertyChanged("Users", this.Users, value);
                    this._Users = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Group._GroupEntityConfiguration == null)) {
                    Group._GroupEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Group");
                }
                return Group._GroupEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.Group", "Users")))) {
                    global::Entities.UserArrayList _a1;
                    _a1 = new Entities.UserArrayList();
                    _a1.AddRange(((global::Entities.User[])(this.Query(typeof(global::Entities.User), "Users", this))));
                    this.OnQueryPropertyChanged("Users", this._Users, _a1);
                    this._Users = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._IsPublic};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._IsPublic = reader.GetBoolean(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._IsPublic = ((bool)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Group).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Group)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Group)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem IsPublic = new NBear.Common.PropertyItem("IsPublic");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class AgentUserArrayList : NBear.Common.EntityArrayList<Entities.AgentUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class AgentUser : User {
            
            protected static NBear.Common.EntityConfiguration _AgentUserEntityConfiguration;
            
            protected string _LoginName;
            
            protected global::Entities.DomainArrayList _Domains;
            
    		public static bool operator ==(global::Entities.AgentUser left, global::Entities.AgentUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.AgentUser left, global::Entities.AgentUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string LoginName {
                get {
                    return this._LoginName;
                }
                set {
                    this.OnPropertyChanged("LoginName", this._LoginName, value);
                    this._LoginName = value;
                }
            }
            
            public global::Entities.DomainArrayList Domains {
                get {
                    if (this.IsQueryPropertyLoaded("Domains")) {
                    }
                    else {
                        global::Entities.DomainArrayList _a1;
                        _a1 = new Entities.DomainArrayList();
                        _a1.AddRange(((global::Entities.Domain[])(this.Query(typeof(global::Entities.Domain), "Domains", this))));
                        this.OnQueryPropertyChanged("Domains", this._Domains, _a1);
                        this._Domains = _a1;
                    }
                    if ((this._Domains == null)) {
                        global::Entities.DomainArrayList _a1;
                        _a1 = new global::Entities.DomainArrayList();
                        this.BindArrayListEventHandlers("Domains", _a1);
                        this._Domains = _a1;
                    }
                    return this._Domains;
                }
                set {
                    this.OnQueryPropertyChanged("Domains", this.Domains, value);
                    this._Domains = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((AgentUser._AgentUserEntityConfiguration == null)) {
                    AgentUser._AgentUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.AgentUser");
                }
                return AgentUser._AgentUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.AgentUser", "Domains")))) {
                    global::Entities.DomainArrayList _a1;
                    _a1 = new Entities.DomainArrayList();
                    _a1.AddRange(((global::Entities.Domain[])(this.Query(typeof(global::Entities.Domain), "Domains", this))));
                    this.OnQueryPropertyChanged("Domains", this._Domains, _a1);
                    this._Domains = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Name,
                        this._Status,
                        this._ID,
                        this._Team_ID,
                        this._LoginName};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Name = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Status = ((NBear.Test.CaseTests.shared.UserStatus)(reader.GetValue(1)));
                }
                if ((false == reader.IsDBNull(2))) {
                    this._ID = this.GetGuid(reader, 2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Team_ID = this.GetGuid(reader, 3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._LoginName = reader.GetString(4);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Name = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Status = ((NBear.Test.CaseTests.shared.UserStatus)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 2)));
                }
                if ((false == row.IsNull(3))) {
                    this._Team_ID = ((System.Guid)(this.GetGuid(row, 3)));
                }
                if ((false == row.IsNull(4))) {
                    this._LoginName = ((string)(row[4]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.AgentUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.AgentUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.AgentUser)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Status = new NBear.Common.PropertyItem("Status");
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem TeamID = new NBear.Common.PropertyItem("Team");
                
                public static NBear.Common.PropertyItem LoginName = new NBear.Common.PropertyItem("LoginName");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class LocalUserArrayList : NBear.Common.EntityArrayList<Entities.LocalUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class LocalUser : AgentUser {
            
            protected static NBear.Common.EntityConfiguration _LocalUserEntityConfiguration;
            
            protected string _Password;
            
    		public static bool operator ==(global::Entities.LocalUser left, global::Entities.LocalUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.LocalUser left, global::Entities.LocalUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            [System.Xml.Serialization.XmlIgnoreAttribute()]
            public string Password {
                get {
                    return this._Password;
                }
                set {
                    this.OnPropertyChanged("Password", this._Password, value);
                    this._Password = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((LocalUser._LocalUserEntityConfiguration == null)) {
                    LocalUser._LocalUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.LocalUser");
                }
                return LocalUser._LocalUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Name,
                        this._Status,
                        this._ID,
                        this._Team_ID,
                        this._LoginName,
                        this._Password};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Name = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Status = ((NBear.Test.CaseTests.shared.UserStatus)(reader.GetValue(1)));
                }
                if ((false == reader.IsDBNull(2))) {
                    this._ID = this.GetGuid(reader, 2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Team_ID = this.GetGuid(reader, 3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._LoginName = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._Password = reader.GetString(5);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Name = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Status = ((NBear.Test.CaseTests.shared.UserStatus)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 2)));
                }
                if ((false == row.IsNull(3))) {
                    this._Team_ID = ((System.Guid)(this.GetGuid(row, 3)));
                }
                if ((false == row.IsNull(4))) {
                    this._LoginName = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._Password = ((string)(row[5]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.LocalUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.LocalUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.LocalUser)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Status = new NBear.Common.PropertyItem("Status");
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem TeamID = new NBear.Common.PropertyItem("Team");
                
                public static NBear.Common.PropertyItem LoginName = new NBear.Common.PropertyItem("LoginName");
                
                public static NBear.Common.PropertyItem Password = new NBear.Common.PropertyItem("Password");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserProfileArrayList : NBear.Common.EntityArrayList<Entities.UserProfile> {
        }
        
        [System.SerializableAttribute()]
        public partial class UserProfile : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _UserProfileEntityConfiguration;
            
            protected global::System.Guid _UserID;
            
            protected string _ContentXml;
            
    		public static bool operator ==(global::Entities.UserProfile left, global::Entities.UserProfile right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.UserProfile left, global::Entities.UserProfile right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid UserID {
                get {
                    return this._UserID;
                }
                set {
                    this.OnPropertyChanged("UserID", this._UserID, value);
                    this._UserID = value;
                }
            }
            
            public string ContentXml {
                get {
                    return this._ContentXml;
                }
                set {
                    this.OnPropertyChanged("ContentXml", this._ContentXml, value);
                    this._ContentXml = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((UserProfile._UserProfileEntityConfiguration == null)) {
                    UserProfile._UserProfileEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.UserProfile");
                }
                return UserProfile._UserProfileEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._UserID,
                        this._ContentXml};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._UserID = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ContentXml = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._UserID = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._ContentXml = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.UserProfile).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.UserProfile)(obj)).isAttached) 
                            && (this.UserID == ((global::Entities.UserProfile)(obj)).UserID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem UserID = new NBear.Common.PropertyItem("UserID");
                
                public static NBear.Common.PropertyItem ContentXml = new NBear.Common.PropertyItem("ContentXml");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserGroupArrayList : NBear.Common.EntityArrayList<Entities.UserGroup> {
        }
        
        [System.SerializableAttribute()]
        public partial class UserGroup : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _UserGroupEntityConfiguration;
            
            protected global::System.Guid _UserID;
            
            protected global::System.Guid _GroupID;
            
            protected int _Weight;
            
    		public static bool operator ==(global::Entities.UserGroup left, global::Entities.UserGroup right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.UserGroup left, global::Entities.UserGroup right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid UserID {
                get {
                    return this._UserID;
                }
                set {
                    this.OnPropertyChanged("UserID", this._UserID, value);
                    this._UserID = value;
                }
            }
            
            public global::System.Guid GroupID {
                get {
                    return this._GroupID;
                }
                set {
                    this.OnPropertyChanged("GroupID", this._GroupID, value);
                    this._GroupID = value;
                }
            }
            
            public int Weight {
                get {
                    return this._Weight;
                }
                set {
                    this.OnPropertyChanged("Weight", this._Weight, value);
                    this._Weight = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((UserGroup._UserGroupEntityConfiguration == null)) {
                    UserGroup._UserGroupEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.UserGroup");
                }
                return UserGroup._UserGroupEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._UserID,
                        this._GroupID,
                        this._Weight};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._UserID = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._GroupID = this.GetGuid(reader, 1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Weight = reader.GetInt32(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._UserID = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._GroupID = ((System.Guid)(this.GetGuid(row, 1)));
                }
                if ((false == row.IsNull(2))) {
                    this._Weight = ((int)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.UserGroup).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return (((this.isAttached && ((global::Entities.UserGroup)(obj)).isAttached) 
                            && (this.UserID == ((global::Entities.UserGroup)(obj)).UserID)) 
                            && (this.GroupID == ((global::Entities.UserGroup)(obj)).GroupID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem UserID = new NBear.Common.PropertyItem("UserID");
                
                public static NBear.Common.PropertyItem GroupID = new NBear.Common.PropertyItem("GroupID");
                
                public static NBear.Common.PropertyItem Weight = new NBear.Common.PropertyItem("Weight");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class AgentUserDomainArrayList : NBear.Common.EntityArrayList<Entities.AgentUserDomain> {
        }
        
        [System.SerializableAttribute()]
        public partial class AgentUserDomain : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _AgentUserDomainEntityConfiguration;
            
            protected global::System.Guid _AgentUserID;
            
            protected global::System.Guid _DomainID;
            
    		public static bool operator ==(global::Entities.AgentUserDomain left, global::Entities.AgentUserDomain right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.AgentUserDomain left, global::Entities.AgentUserDomain right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid AgentUserID {
                get {
                    return this._AgentUserID;
                }
                set {
                    this.OnPropertyChanged("AgentUserID", this._AgentUserID, value);
                    this._AgentUserID = value;
                }
            }
            
            public global::System.Guid DomainID {
                get {
                    return this._DomainID;
                }
                set {
                    this.OnPropertyChanged("DomainID", this._DomainID, value);
                    this._DomainID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((AgentUserDomain._AgentUserDomainEntityConfiguration == null)) {
                    AgentUserDomain._AgentUserDomainEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.AgentUserDomain");
                }
                return AgentUserDomain._AgentUserDomainEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._AgentUserID,
                        this._DomainID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._AgentUserID = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._DomainID = this.GetGuid(reader, 1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._AgentUserID = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._DomainID = ((System.Guid)(this.GetGuid(row, 1)));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.AgentUserDomain).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return (((this.isAttached && ((global::Entities.AgentUserDomain)(obj)).isAttached) 
                            && (this.AgentUserID == ((global::Entities.AgentUserDomain)(obj)).AgentUserID)) 
                            && (this.DomainID == ((global::Entities.AgentUserDomain)(obj)).DomainID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem AgentUserID = new NBear.Common.PropertyItem("AgentUserID");
                
                public static NBear.Common.PropertyItem DomainID = new NBear.Common.PropertyItem("DomainID");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class DomainArrayList : NBear.Common.EntityArrayList<Entities.Domain> {
        }
        
        [System.SerializableAttribute()]
        public partial class Domain : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _DomainEntityConfiguration;
            
            protected global::System.Guid _ID;
            
            protected string _Name;
            
            protected string _Desc;
            
    		public static bool operator ==(global::Entities.Domain left, global::Entities.Domain right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Domain left, global::Entities.Domain right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public string Desc {
                get {
                    return this._Desc;
                }
                set {
                    this.OnPropertyChanged("Desc", this._Desc, value);
                    this._Desc = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Domain._DomainEntityConfiguration == null)) {
                    Domain._DomainEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Domain");
                }
                return Domain._DomainEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Desc};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Desc = reader.GetString(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Desc = ((string)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Domain).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Domain)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Domain)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Desc = new NBear.Common.PropertyItem("Desc");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TeamArrayList : NBear.Common.EntityArrayList<Entities.Team> {
        }
        
        [System.SerializableAttribute()]
        public partial class Team : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _TeamEntityConfiguration;
            
            protected global::System.Guid _ID;
            
            protected string _Name;
            
            protected global::Entities.UserArrayList _Users;
            
    		public static bool operator ==(global::Entities.Team left, global::Entities.Team right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Team left, global::Entities.Team right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::Entities.UserArrayList Users {
                get {
                    if (this.IsQueryPropertyLoaded("Users")) {
                    }
                    else {
                        global::Entities.UserArrayList _a1;
                        _a1 = new Entities.UserArrayList();
                        _a1.AddRange(((global::Entities.User[])(this.Query(typeof(global::Entities.User), "Users", this))));
                        this.OnQueryPropertyChanged("Users", this._Users, _a1);
                        this._Users = _a1;
                    }
                    if ((this._Users == null)) {
                        global::Entities.UserArrayList _a1;
                        _a1 = new global::Entities.UserArrayList();
                        this.BindArrayListEventHandlers("Users", _a1);
                        this._Users = _a1;
                    }
                    return this._Users;
                }
                set {
                    this.OnQueryPropertyChanged("Users", this.Users, value);
                    this._Users = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Team._TeamEntityConfiguration == null)) {
                    Team._TeamEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Team");
                }
                return Team._TeamEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.Team", "Users")))) {
                    global::Entities.UserArrayList _a1;
                    _a1 = new Entities.UserArrayList();
                    _a1.AddRange(((global::Entities.User[])(this.Query(typeof(global::Entities.User), "Users", this))));
                    this.OnQueryPropertyChanged("Users", this._Users, _a1);
                    this._Users = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Team).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Team)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Team)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class MasterParentArrayList : NBear.Common.EntityArrayList<Entities.MasterParent> {
        }
        
        [System.SerializableAttribute()]
        public partial class MasterParent : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _MasterParentEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
    		public static bool operator ==(global::Entities.MasterParent left, global::Entities.MasterParent right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.MasterParent left, global::Entities.MasterParent right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((MasterParent._MasterParentEntityConfiguration == null)) {
                    MasterParent._MasterParentEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.MasterParent");
                }
                return MasterParent._MasterParentEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.MasterParent).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.MasterParent)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.MasterParent)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class MasterArrayList : NBear.Common.EntityArrayList<Entities.Master> {
        }
        
        [System.SerializableAttribute()]
        public partial class Master : MasterParent {
            
            protected static NBear.Common.EntityConfiguration _MasterEntityConfiguration;
            
            protected string _OtherData;
            
            protected global::Entities.DetailArrayList _Details;
            
            protected global::System.Int32? _IntProperty;
            
            protected global::System.Decimal? _DecimalProperty;
            
            protected global::System.Guid? _GuidProperty;
            
    		public static bool operator ==(global::Entities.Master left, global::Entities.Master right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Master left, global::Entities.Master right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string OtherData {
                get {
                    return this._OtherData;
                }
                set {
                    this.OnPropertyChanged("OtherData", this._OtherData, value);
                    this._OtherData = value;
                }
            }
            
            public global::Entities.DetailArrayList Details {
                get {
                    if (this.IsQueryPropertyLoaded("Details")) {
                    }
                    else {
                        global::Entities.DetailArrayList _a1;
                        _a1 = new Entities.DetailArrayList();
                        _a1.AddRange(((global::Entities.Detail[])(this.Query(typeof(global::Entities.Detail), "Details", this))));
                        this.OnQueryPropertyChanged("Details", this._Details, _a1);
                        this._Details = _a1;
                    }
                    if ((this._Details == null)) {
                        global::Entities.DetailArrayList _a1;
                        _a1 = new global::Entities.DetailArrayList();
                        this.BindArrayListEventHandlers("Details", _a1);
                        this._Details = _a1;
                    }
                    return this._Details;
                }
                set {
                    this.OnQueryPropertyChanged("Details", this.Details, value);
                    this._Details = value;
                }
            }
            
            public global::System.Int32? IntProperty {
                get {
                    return this._IntProperty;
                }
                set {
                    this.OnPropertyChanged("IntProperty", this._IntProperty, value);
                    this._IntProperty = value;
                }
            }
            
            public global::System.Decimal? DecimalProperty {
                get {
                    return this._DecimalProperty;
                }
                set {
                    this.OnPropertyChanged("DecimalProperty", this._DecimalProperty, value);
                    this._DecimalProperty = value;
                }
            }
            
            public global::System.Guid? GuidProperty {
                get {
                    return this._GuidProperty;
                }
                set {
                    this.OnPropertyChanged("GuidProperty", this._GuidProperty, value);
                    this._GuidProperty = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Master._MasterEntityConfiguration == null)) {
                    Master._MasterEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Master");
                }
                return Master._MasterEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.Master", "Details")))) {
                    global::Entities.DetailArrayList _a1;
                    _a1 = new Entities.DetailArrayList();
                    _a1.AddRange(((global::Entities.Detail[])(this.Query(typeof(global::Entities.Detail), "Details", this))));
                    this.OnQueryPropertyChanged("Details", this._Details, _a1);
                    this._Details = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._OtherData,
                        this._IntProperty,
                        this._DecimalProperty,
                        this._GuidProperty};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._OtherData = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._IntProperty = ((System.Int32?)(reader.GetValue(3)));
                }
                if ((false == reader.IsDBNull(4))) {
                    this._DecimalProperty = ((System.Decimal?)(reader.GetValue(4)));
                }
                if ((false == reader.IsDBNull(5))) {
                    this._GuidProperty = ((System.Guid?)(reader.GetValue(5)));
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._OtherData = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._IntProperty = ((System.Nullable<int>)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._DecimalProperty = ((System.Nullable<decimal>)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._GuidProperty = ((System.Nullable<System.Guid>)(row[5]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Master).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Master)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Master)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem OtherData = new NBear.Common.PropertyItem("OtherData");
                
                public static NBear.Common.PropertyItem IntProperty = new NBear.Common.PropertyItem("IntProperty");
                
                public static NBear.Common.PropertyItem DecimalProperty = new NBear.Common.PropertyItem("DecimalProperty");
                
                public static NBear.Common.PropertyItem GuidProperty = new NBear.Common.PropertyItem("GuidProperty");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class DetailArrayList : NBear.Common.EntityArrayList<Entities.Detail> {
        }
        
        [System.SerializableAttribute()]
        public partial class Detail : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _DetailEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected int _MasterID;
            
    		public static bool operator ==(global::Entities.Detail left, global::Entities.Detail right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Detail left, global::Entities.Detail right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public int MasterID {
                get {
                    return this._MasterID;
                }
                set {
                    this.OnPropertyChanged("MasterID", this._MasterID, value);
                    this._MasterID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Detail._DetailEntityConfiguration == null)) {
                    Detail._DetailEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Detail");
                }
                return Detail._DetailEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._MasterID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._MasterID = reader.GetInt32(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._MasterID = ((int)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Detail).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Detail)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Detail)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem MasterID = new NBear.Common.PropertyItem("MasterID");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class CategoryInfoArrayList : NBear.Common.EntityArrayList<Entities.CategoryInfo> {
        }
        
        [System.SerializableAttribute()]
        public partial class CategoryInfo : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _CategoryInfoEntityConfiguration;
            
            protected string _Id;
            
            protected string _Name;
            
    		public static bool operator ==(global::Entities.CategoryInfo left, global::Entities.CategoryInfo right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.CategoryInfo left, global::Entities.CategoryInfo right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Id {
                get {
                    return this._Id;
                }
                set {
                    this.OnPropertyChanged("Id", this._Id, value);
                    this._Id = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((CategoryInfo._CategoryInfoEntityConfiguration == null)) {
                    CategoryInfo._CategoryInfoEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.CategoryInfo");
                }
                return CategoryInfo._CategoryInfoEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Id,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Id = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Id = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.CategoryInfo).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.CategoryInfo)(obj)).isAttached) 
                            && (this.Id == ((global::Entities.CategoryInfo)(obj)).Id));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Id = new NBear.Common.PropertyItem("Id");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class ProductInfoArrayList : NBear.Common.EntityArrayList<Entities.ProductInfo> {
        }
        
        [System.SerializableAttribute()]
        public partial class ProductInfo : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _ProductInfoEntityConfiguration;
            
            protected string _Id;
            
            protected string _CategoryId;
            
    		public static bool operator ==(global::Entities.ProductInfo left, global::Entities.ProductInfo right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.ProductInfo left, global::Entities.ProductInfo right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Id {
                get {
                    return this._Id;
                }
                set {
                    this.OnPropertyChanged("Id", this._Id, value);
                    this._Id = value;
                }
            }
            
            public string CategoryId {
                get {
                    return this._CategoryId;
                }
                set {
                    this.OnPropertyChanged("CategoryId", this._CategoryId, value);
                    this._CategoryId = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((ProductInfo._ProductInfoEntityConfiguration == null)) {
                    ProductInfo._ProductInfoEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.ProductInfo");
                }
                return ProductInfo._ProductInfoEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Id,
                        this._CategoryId};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Id = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._CategoryId = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Id = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._CategoryId = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.ProductInfo).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.ProductInfo)(obj)).isAttached) 
                            && (this.Id == ((global::Entities.ProductInfo)(obj)).Id));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Id = new NBear.Common.PropertyItem("Id");
                
                public static NBear.Common.PropertyItem CategoryId = new NBear.Common.PropertyItem("CategoryId");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class CategoryArrayList : NBear.Common.EntityArrayList<Entities.Category> {
        }
        
        [System.SerializableAttribute()]
        public partial class Category : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _CategoryEntityConfiguration;
            
            protected long _ID;
            
            protected string _Name;
            
            protected global::Entities.Category _Parent;
            
            protected global::System.Int64? _Parent_ID;
            
            protected global::Entities.CategoryArrayList _Childs;
            
    		public static bool operator ==(global::Entities.Category left, global::Entities.Category right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Category left, global::Entities.Category right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public long ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            [System.Xml.Serialization.XmlIgnoreAttribute()]
            public global::Entities.Category Parent {
                get {
                    if (this.IsQueryPropertyLoaded("Parent")) {
                    }
                    else {
                        global::Entities.Category _obj;
                        _obj = ((global::Entities.Category)(this.QueryOne(typeof(global::Entities.Category), "Parent", this)));
                        this.OnQueryOnePropertyChanged("Parent", this._Parent, _obj);
                        this._Parent = _obj;
                    }
                    return this._Parent;
                }
                set {
                    this.OnQueryOnePropertyChanged("Parent", this.Parent, value);
                    this._Parent = value;
                    if ((value == null)) {
                        this.OnPropertyChanged("Parent", this._Parent_ID, null);
                        this._Parent_ID = null;
                    }
                    else {
                        this.OnPropertyChanged("Parent", this._Parent_ID, value.ID);
                        this._Parent_ID = value.ID;
                    }
                }
            }
            
            public global::Entities.CategoryArrayList Childs {
                get {
                    if (this.IsQueryPropertyLoaded("Childs")) {
                    }
                    else {
                        global::Entities.CategoryArrayList _a1;
                        _a1 = new Entities.CategoryArrayList();
                        _a1.AddRange(((global::Entities.Category[])(this.Query(typeof(global::Entities.Category), "Childs", this))));
                        this.OnQueryPropertyChanged("Childs", this._Childs, _a1);
                        this._Childs = _a1;
                    }
                    if ((this._Childs == null)) {
                        global::Entities.CategoryArrayList _a1;
                        _a1 = new global::Entities.CategoryArrayList();
                        this.BindArrayListEventHandlers("Childs", _a1);
                        this._Childs = _a1;
                    }
                    return this._Childs;
                }
                set {
                    this.OnQueryPropertyChanged("Childs", this.Childs, value);
                    this._Childs = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Category._CategoryEntityConfiguration == null)) {
                    Category._CategoryEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Category");
                }
                return Category._CategoryEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.Category", "Parent")))) {
                    global::Entities.Category _obj;
                    _obj = ((global::Entities.Category)(this.QueryOne(typeof(global::Entities.Category), "Parent", this)));
                    this.OnQueryOnePropertyChanged("Parent", this._Parent, _obj);
                    this._Parent = _obj;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.Category", "Childs")))) {
                    global::Entities.CategoryArrayList _a1;
                    _a1 = new Entities.CategoryArrayList();
                    _a1.AddRange(((global::Entities.Category[])(this.Query(typeof(global::Entities.Category), "Childs", this))));
                    this.OnQueryPropertyChanged("Childs", this._Childs, _a1);
                    this._Childs = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Parent_ID,
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Parent_ID = reader.GetInt64(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ID = reader.GetInt64(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Name = reader.GetString(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Parent_ID = ((long)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ID = ((long)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Name = ((string)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Category).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Category)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Category)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ParentID = new NBear.Common.PropertyItem("Parent");
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class cms_ArticlesArrayList : NBear.Common.EntityArrayList<Entities.cms_Articles> {
        }
        
        [System.SerializableAttribute()]
        public partial class cms_Articles : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _cms_ArticlesEntityConfiguration;
            
            protected int _Id;
            
            protected int _ChannelId;
            
            protected string _Editor;
            
            protected string _Author;
            
            protected string _Source;
            
            protected string _Picture;
            
            protected string _Title;
            
            protected string _Body;
            
            protected global::System.DateTime _UpdateTime;
            
            protected global::System.DateTime _CreateTime;
            
            protected global::Entities.cms_ArticleStatistics _Statistics;
            
            protected global::Entities.cms_Channels _Channel;
            
    		public static bool operator ==(global::Entities.cms_Articles left, global::Entities.cms_Articles right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.cms_Articles left, global::Entities.cms_Articles right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int Id {
                get {
                    return this._Id;
                }
                set {
                    this.OnPropertyChanged("Id", this._Id, value);
                    this._Id = value;
                }
            }
            
            public int ChannelId {
                get {
                    return this._ChannelId;
                }
                set {
                    this.OnPropertyChanged("ChannelId", this._ChannelId, value);
                    this._ChannelId = value;
                }
            }
            
            public string Editor {
                get {
                    return this._Editor;
                }
                set {
                    this.OnPropertyChanged("Editor", this._Editor, value);
                    this._Editor = value;
                }
            }
            
            public string Author {
                get {
                    return this._Author;
                }
                set {
                    this.OnPropertyChanged("Author", this._Author, value);
                    this._Author = value;
                }
            }
            
            public string Source {
                get {
                    return this._Source;
                }
                set {
                    this.OnPropertyChanged("Source", this._Source, value);
                    this._Source = value;
                }
            }
            
            public string Picture {
                get {
                    return this._Picture;
                }
                set {
                    this.OnPropertyChanged("Picture", this._Picture, value);
                    this._Picture = value;
                }
            }
            
            public string Title {
                get {
                    return this._Title;
                }
                set {
                    this.OnPropertyChanged("Title", this._Title, value);
                    this._Title = value;
                }
            }
            
            public string Body {
                get {
                    return this._Body;
                }
                set {
                    this.OnPropertyChanged("Body", this._Body, value);
                    this._Body = value;
                }
            }
            
            public global::System.DateTime UpdateTime {
                get {
                    return this._UpdateTime;
                }
                set {
                    this.OnPropertyChanged("UpdateTime", this._UpdateTime, value);
                    this._UpdateTime = value;
                }
            }
            
            public global::System.DateTime CreateTime {
                get {
                    return this._CreateTime;
                }
                set {
                    this.OnPropertyChanged("CreateTime", this._CreateTime, value);
                    this._CreateTime = value;
                }
            }
            
            public global::Entities.cms_ArticleStatistics Statistics {
                get {
                    if (this.IsQueryPropertyLoaded("Statistics")) {
                    }
                    else {
                        global::Entities.cms_ArticleStatistics _obj;
                        _obj = ((global::Entities.cms_ArticleStatistics)(this.QueryOne(typeof(global::Entities.cms_ArticleStatistics), "Statistics", this)));
                        this.OnQueryOnePropertyChanged("Statistics", this._Statistics, _obj);
                        this._Statistics = _obj;
                    }
                    return this._Statistics;
                }
                set {
                    this.OnQueryOnePropertyChanged("Statistics", this.Statistics, value);
                    this._Statistics = value;
                }
            }
            
            public global::Entities.cms_Channels Channel {
                get {
                    if (this.IsQueryPropertyLoaded("Channel")) {
                    }
                    else {
                        global::Entities.cms_Channels _obj;
                        _obj = ((global::Entities.cms_Channels)(this.QueryOne(typeof(global::Entities.cms_Channels), "Channel", this)));
                        this.OnQueryOnePropertyChanged("Channel", this._Channel, _obj);
                        this._Channel = _obj;
                    }
                    return this._Channel;
                }
                set {
                    this.OnQueryOnePropertyChanged("Channel", this.Channel, value);
                    this._Channel = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((cms_Articles._cms_ArticlesEntityConfiguration == null)) {
                    cms_Articles._cms_ArticlesEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.cms_Articles");
                }
                return cms_Articles._cms_ArticlesEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.cms_Articles", "Statistics")))) {
                    global::Entities.cms_ArticleStatistics _obj;
                    _obj = ((global::Entities.cms_ArticleStatistics)(this.QueryOne(typeof(global::Entities.cms_ArticleStatistics), "Statistics", this)));
                    this.OnQueryOnePropertyChanged("Statistics", this._Statistics, _obj);
                    this._Statistics = _obj;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.cms_Articles", "Channel")))) {
                    global::Entities.cms_Channels _obj;
                    _obj = ((global::Entities.cms_Channels)(this.QueryOne(typeof(global::Entities.cms_Channels), "Channel", this)));
                    this.OnQueryOnePropertyChanged("Channel", this._Channel, _obj);
                    this._Channel = _obj;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Id,
                        this._ChannelId,
                        this._Editor,
                        this._Author,
                        this._Source,
                        this._Picture,
                        this._Title,
                        this._Body,
                        this._UpdateTime,
                        this._CreateTime};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Id = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ChannelId = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Editor = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Author = reader.GetString(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Source = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._Picture = reader.GetString(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._Title = reader.GetString(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._Body = reader.GetString(7);
                }
                if ((false == reader.IsDBNull(8))) {
                    this._UpdateTime = reader.GetDateTime(8);
                }
                if ((false == reader.IsDBNull(9))) {
                    this._CreateTime = reader.GetDateTime(9);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Id = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ChannelId = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Editor = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Author = ((string)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Source = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._Picture = ((string)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._Title = ((string)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._Body = ((string)(row[7]));
                }
                if ((false == row.IsNull(8))) {
                    this._UpdateTime = ((System.DateTime)(row[8]));
                }
                if ((false == row.IsNull(9))) {
                    this._CreateTime = ((System.DateTime)(row[9]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.cms_Articles).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.cms_Articles)(obj)).isAttached) 
                            && (this.Id == ((global::Entities.cms_Articles)(obj)).Id));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Id = new NBear.Common.PropertyItem("Id");
                
                public static NBear.Common.PropertyItem ChannelId = new NBear.Common.PropertyItem("ChannelId");
                
                public static NBear.Common.PropertyItem Editor = new NBear.Common.PropertyItem("Editor");
                
                public static NBear.Common.PropertyItem Author = new NBear.Common.PropertyItem("Author");
                
                public static NBear.Common.PropertyItem Source = new NBear.Common.PropertyItem("Source");
                
                public static NBear.Common.PropertyItem Picture = new NBear.Common.PropertyItem("Picture");
                
                public static NBear.Common.PropertyItem Title = new NBear.Common.PropertyItem("Title");
                
                public static NBear.Common.PropertyItem Body = new NBear.Common.PropertyItem("Body");
                
                public static NBear.Common.PropertyItem UpdateTime = new NBear.Common.PropertyItem("UpdateTime");
                
                public static NBear.Common.PropertyItem CreateTime = new NBear.Common.PropertyItem("CreateTime");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class cms_StatisticsArrayList : NBear.Common.EntityArrayList<Entities.cms_Statistics> {
        }
        
        [System.SerializableAttribute()]
        public partial class cms_Statistics : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _cms_StatisticsEntityConfiguration;
            
            protected int _ItemId;
            
            protected int _Day;
            
            protected int _DayClick;
            
            protected int _Week;
            
            protected int _WeekClick;
            
            protected int _Month;
            
            protected int _MonthClick;
            
            protected int _Year;
            
            protected int _YearClick;
            
            protected int _TotalClick;
            
    		public static bool operator ==(global::Entities.cms_Statistics left, global::Entities.cms_Statistics right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.cms_Statistics left, global::Entities.cms_Statistics right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ItemId {
                get {
                    return this._ItemId;
                }
                set {
                    this.OnPropertyChanged("ItemId", this._ItemId, value);
                    this._ItemId = value;
                }
            }
            
            public int Day {
                get {
                    return this._Day;
                }
                set {
                    this.OnPropertyChanged("Day", this._Day, value);
                    this._Day = value;
                }
            }
            
            public int DayClick {
                get {
                    return this._DayClick;
                }
                set {
                    this.OnPropertyChanged("DayClick", this._DayClick, value);
                    this._DayClick = value;
                }
            }
            
            public int Week {
                get {
                    return this._Week;
                }
                set {
                    this.OnPropertyChanged("Week", this._Week, value);
                    this._Week = value;
                }
            }
            
            public int WeekClick {
                get {
                    return this._WeekClick;
                }
                set {
                    this.OnPropertyChanged("WeekClick", this._WeekClick, value);
                    this._WeekClick = value;
                }
            }
            
            public int Month {
                get {
                    return this._Month;
                }
                set {
                    this.OnPropertyChanged("Month", this._Month, value);
                    this._Month = value;
                }
            }
            
            public int MonthClick {
                get {
                    return this._MonthClick;
                }
                set {
                    this.OnPropertyChanged("MonthClick", this._MonthClick, value);
                    this._MonthClick = value;
                }
            }
            
            public int Year {
                get {
                    return this._Year;
                }
                set {
                    this.OnPropertyChanged("Year", this._Year, value);
                    this._Year = value;
                }
            }
            
            public int YearClick {
                get {
                    return this._YearClick;
                }
                set {
                    this.OnPropertyChanged("YearClick", this._YearClick, value);
                    this._YearClick = value;
                }
            }
            
            public int TotalClick {
                get {
                    return this._TotalClick;
                }
                set {
                    this.OnPropertyChanged("TotalClick", this._TotalClick, value);
                    this._TotalClick = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((cms_Statistics._cms_StatisticsEntityConfiguration == null)) {
                    cms_Statistics._cms_StatisticsEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.cms_Statistics");
                }
                return cms_Statistics._cms_StatisticsEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ItemId,
                        this._Day,
                        this._DayClick,
                        this._Week,
                        this._WeekClick,
                        this._Month,
                        this._MonthClick,
                        this._Year,
                        this._YearClick,
                        this._TotalClick};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ItemId = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Day = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._DayClick = reader.GetInt32(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Week = reader.GetInt32(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._WeekClick = reader.GetInt32(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._Month = reader.GetInt32(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._MonthClick = reader.GetInt32(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._Year = reader.GetInt32(7);
                }
                if ((false == reader.IsDBNull(8))) {
                    this._YearClick = reader.GetInt32(8);
                }
                if ((false == reader.IsDBNull(9))) {
                    this._TotalClick = reader.GetInt32(9);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ItemId = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Day = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._DayClick = ((int)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Week = ((int)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._WeekClick = ((int)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._Month = ((int)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._MonthClick = ((int)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._Year = ((int)(row[7]));
                }
                if ((false == row.IsNull(8))) {
                    this._YearClick = ((int)(row[8]));
                }
                if ((false == row.IsNull(9))) {
                    this._TotalClick = ((int)(row[9]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.cms_Statistics).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.cms_Statistics)(obj)).isAttached) 
                            && (this.ItemId == ((global::Entities.cms_Statistics)(obj)).ItemId));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ItemId = new NBear.Common.PropertyItem("ItemId");
                
                public static NBear.Common.PropertyItem Day = new NBear.Common.PropertyItem("Day");
                
                public static NBear.Common.PropertyItem DayClick = new NBear.Common.PropertyItem("DayClick");
                
                public static NBear.Common.PropertyItem Week = new NBear.Common.PropertyItem("Week");
                
                public static NBear.Common.PropertyItem WeekClick = new NBear.Common.PropertyItem("WeekClick");
                
                public static NBear.Common.PropertyItem Month = new NBear.Common.PropertyItem("Month");
                
                public static NBear.Common.PropertyItem MonthClick = new NBear.Common.PropertyItem("MonthClick");
                
                public static NBear.Common.PropertyItem Year = new NBear.Common.PropertyItem("Year");
                
                public static NBear.Common.PropertyItem YearClick = new NBear.Common.PropertyItem("YearClick");
                
                public static NBear.Common.PropertyItem TotalClick = new NBear.Common.PropertyItem("TotalClick");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class cms_ArticleStatisticsArrayList : NBear.Common.EntityArrayList<Entities.cms_ArticleStatistics> {
        }
        
        [System.SerializableAttribute()]
        public partial class cms_ArticleStatistics : cms_Statistics {
            
            protected static NBear.Common.EntityConfiguration _cms_ArticleStatisticsEntityConfiguration;
            
            protected global::Entities.cms_Articles _Article;
            
    		public static bool operator ==(global::Entities.cms_ArticleStatistics left, global::Entities.cms_ArticleStatistics right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.cms_ArticleStatistics left, global::Entities.cms_ArticleStatistics right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::Entities.cms_Articles Article {
                get {
                    if (this.IsQueryPropertyLoaded("Article")) {
                    }
                    else {
                        global::Entities.cms_Articles _obj;
                        _obj = ((global::Entities.cms_Articles)(this.QueryOne(typeof(global::Entities.cms_Articles), "Article", this)));
                        this.OnQueryOnePropertyChanged("Article", this._Article, _obj);
                        this._Article = _obj;
                    }
                    return this._Article;
                }
                set {
                    this.OnQueryOnePropertyChanged("Article", this.Article, value);
                    this._Article = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((cms_ArticleStatistics._cms_ArticleStatisticsEntityConfiguration == null)) {
                    cms_ArticleStatistics._cms_ArticleStatisticsEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.cms_ArticleStatistics");
                }
                return cms_ArticleStatistics._cms_ArticleStatisticsEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.cms_ArticleStatistics", "Article")))) {
                    global::Entities.cms_Articles _obj;
                    _obj = ((global::Entities.cms_Articles)(this.QueryOne(typeof(global::Entities.cms_Articles), "Article", this)));
                    this.OnQueryOnePropertyChanged("Article", this._Article, _obj);
                    this._Article = _obj;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ItemId,
                        this._Day,
                        this._DayClick,
                        this._Week,
                        this._WeekClick,
                        this._Month,
                        this._MonthClick,
                        this._Year,
                        this._YearClick,
                        this._TotalClick};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ItemId = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Day = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._DayClick = reader.GetInt32(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Week = reader.GetInt32(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._WeekClick = reader.GetInt32(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._Month = reader.GetInt32(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._MonthClick = reader.GetInt32(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._Year = reader.GetInt32(7);
                }
                if ((false == reader.IsDBNull(8))) {
                    this._YearClick = reader.GetInt32(8);
                }
                if ((false == reader.IsDBNull(9))) {
                    this._TotalClick = reader.GetInt32(9);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ItemId = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Day = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._DayClick = ((int)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Week = ((int)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._WeekClick = ((int)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._Month = ((int)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._MonthClick = ((int)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._Year = ((int)(row[7]));
                }
                if ((false == row.IsNull(8))) {
                    this._YearClick = ((int)(row[8]));
                }
                if ((false == row.IsNull(9))) {
                    this._TotalClick = ((int)(row[9]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.cms_ArticleStatistics).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.cms_ArticleStatistics)(obj)).isAttached) 
                            && (this.ItemId == ((global::Entities.cms_ArticleStatistics)(obj)).ItemId));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem ItemId = new NBear.Common.PropertyItem("ItemId");
                
                public static NBear.Common.PropertyItem Day = new NBear.Common.PropertyItem("Day");
                
                public static NBear.Common.PropertyItem DayClick = new NBear.Common.PropertyItem("DayClick");
                
                public static NBear.Common.PropertyItem Week = new NBear.Common.PropertyItem("Week");
                
                public static NBear.Common.PropertyItem WeekClick = new NBear.Common.PropertyItem("WeekClick");
                
                public static NBear.Common.PropertyItem Month = new NBear.Common.PropertyItem("Month");
                
                public static NBear.Common.PropertyItem MonthClick = new NBear.Common.PropertyItem("MonthClick");
                
                public static NBear.Common.PropertyItem Year = new NBear.Common.PropertyItem("Year");
                
                public static NBear.Common.PropertyItem YearClick = new NBear.Common.PropertyItem("YearClick");
                
                public static NBear.Common.PropertyItem TotalClick = new NBear.Common.PropertyItem("TotalClick");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class cms_ChannelsArrayList : NBear.Common.EntityArrayList<Entities.cms_Channels> {
        }
        
        [System.SerializableAttribute()]
        public partial class cms_Channels : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _cms_ChannelsEntityConfiguration;
            
            protected int _Id;
            
            protected int _ParentId;
            
            protected int _OrderNum;
            
            protected int _Depth;
            
            protected string _Dir;
            
            protected string _Title;
            
            protected global::Entities.cms_Channels _Parent;
            
            protected global::Entities.cms_ChannelsArrayList _Childs;
            
            protected global::Entities.cms_ArticlesArrayList _Articles;
            
    		public static bool operator ==(global::Entities.cms_Channels left, global::Entities.cms_Channels right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.cms_Channels left, global::Entities.cms_Channels right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int Id {
                get {
                    return this._Id;
                }
                set {
                    this.OnPropertyChanged("Id", this._Id, value);
                    this._Id = value;
                }
            }
            
            public int ParentId {
                get {
                    return this._ParentId;
                }
                set {
                    this.OnPropertyChanged("ParentId", this._ParentId, value);
                    this._ParentId = value;
                }
            }
            
            public int OrderNum {
                get {
                    return this._OrderNum;
                }
                set {
                    this.OnPropertyChanged("OrderNum", this._OrderNum, value);
                    this._OrderNum = value;
                }
            }
            
            public int Depth {
                get {
                    return this._Depth;
                }
                set {
                    this.OnPropertyChanged("Depth", this._Depth, value);
                    this._Depth = value;
                }
            }
            
            public string Dir {
                get {
                    return this._Dir;
                }
                set {
                    this.OnPropertyChanged("Dir", this._Dir, value);
                    this._Dir = value;
                }
            }
            
            public string Title {
                get {
                    return this._Title;
                }
                set {
                    this.OnPropertyChanged("Title", this._Title, value);
                    this._Title = value;
                }
            }
            
            public global::Entities.cms_Channels Parent {
                get {
                    if (this.IsQueryPropertyLoaded("Parent")) {
                    }
                    else {
                        global::Entities.cms_Channels _obj;
                        _obj = ((global::Entities.cms_Channels)(this.QueryOne(typeof(global::Entities.cms_Channels), "Parent", this)));
                        this.OnQueryOnePropertyChanged("Parent", this._Parent, _obj);
                        this._Parent = _obj;
                    }
                    return this._Parent;
                }
                set {
                    this.OnQueryOnePropertyChanged("Parent", this.Parent, value);
                    this._Parent = value;
                }
            }
            
            [System.Xml.Serialization.XmlIgnoreAttribute()]
            public global::Entities.cms_ChannelsArrayList Childs {
                get {
                    if (this.IsQueryPropertyLoaded("Childs")) {
                    }
                    else {
                        global::Entities.cms_ChannelsArrayList _a1;
                        _a1 = new Entities.cms_ChannelsArrayList();
                        _a1.AddRange(((global::Entities.cms_Channels[])(this.Query(typeof(global::Entities.cms_Channels), "Childs", this))));
                        this.OnQueryPropertyChanged("Childs", this._Childs, _a1);
                        this._Childs = _a1;
                    }
                    if ((this._Childs == null)) {
                        global::Entities.cms_ChannelsArrayList _a1;
                        _a1 = new global::Entities.cms_ChannelsArrayList();
                        this.BindArrayListEventHandlers("Childs", _a1);
                        this._Childs = _a1;
                    }
                    return this._Childs;
                }
                set {
                    this.OnQueryPropertyChanged("Childs", this.Childs, value);
                    this._Childs = value;
                }
            }
            
            public global::Entities.cms_ArticlesArrayList Articles {
                get {
                    if (this.IsQueryPropertyLoaded("Articles")) {
                    }
                    else {
                        global::Entities.cms_ArticlesArrayList _a1;
                        _a1 = new Entities.cms_ArticlesArrayList();
                        _a1.AddRange(((global::Entities.cms_Articles[])(this.Query(typeof(global::Entities.cms_Articles), "Articles", this))));
                        this.OnQueryPropertyChanged("Articles", this._Articles, _a1);
                        this._Articles = _a1;
                    }
                    if ((this._Articles == null)) {
                        global::Entities.cms_ArticlesArrayList _a1;
                        _a1 = new global::Entities.cms_ArticlesArrayList();
                        this.BindArrayListEventHandlers("Articles", _a1);
                        this._Articles = _a1;
                    }
                    return this._Articles;
                }
                set {
                    this.OnQueryPropertyChanged("Articles", this.Articles, value);
                    this._Articles = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((cms_Channels._cms_ChannelsEntityConfiguration == null)) {
                    cms_Channels._cms_ChannelsEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.cms_Channels");
                }
                return cms_Channels._cms_ChannelsEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.cms_Channels", "Parent")))) {
                    global::Entities.cms_Channels _obj;
                    _obj = ((global::Entities.cms_Channels)(this.QueryOne(typeof(global::Entities.cms_Channels), "Parent", this)));
                    this.OnQueryOnePropertyChanged("Parent", this._Parent, _obj);
                    this._Parent = _obj;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.cms_Channels", "Childs")))) {
                    global::Entities.cms_ChannelsArrayList _a1;
                    _a1 = new Entities.cms_ChannelsArrayList();
                    _a1.AddRange(((global::Entities.cms_Channels[])(this.Query(typeof(global::Entities.cms_Channels), "Childs", this))));
                    this.OnQueryPropertyChanged("Childs", this._Childs, _a1);
                    this._Childs = _a1;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.cms_Channels", "Articles")))) {
                    global::Entities.cms_ArticlesArrayList _a1;
                    _a1 = new Entities.cms_ArticlesArrayList();
                    _a1.AddRange(((global::Entities.cms_Articles[])(this.Query(typeof(global::Entities.cms_Articles), "Articles", this))));
                    this.OnQueryPropertyChanged("Articles", this._Articles, _a1);
                    this._Articles = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Id,
                        this._ParentId,
                        this._OrderNum,
                        this._Depth,
                        this._Dir,
                        this._Title};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Id = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ParentId = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._OrderNum = reader.GetInt32(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Depth = reader.GetInt32(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Dir = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._Title = reader.GetString(5);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Id = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ParentId = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._OrderNum = ((int)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Depth = ((int)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Dir = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._Title = ((string)(row[5]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.cms_Channels).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.cms_Channels)(obj)).isAttached) 
                            && (this.Id == ((global::Entities.cms_Channels)(obj)).Id));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Id = new NBear.Common.PropertyItem("Id");
                
                public static NBear.Common.PropertyItem ParentId = new NBear.Common.PropertyItem("ParentId");
                
                public static NBear.Common.PropertyItem OrderNum = new NBear.Common.PropertyItem("OrderNum");
                
                public static NBear.Common.PropertyItem Depth = new NBear.Common.PropertyItem("Depth");
                
                public static NBear.Common.PropertyItem Dir = new NBear.Common.PropertyItem("Dir");
                
                public static NBear.Common.PropertyItem Title = new NBear.Common.PropertyItem("Title");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class nb_PagePartsArrayList : NBear.Common.EntityArrayList<Entities.nb_PageParts> {
        }
        
        [System.SerializableAttribute()]
        public partial class nb_PageParts : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _nb_PagePartsEntityConfiguration;
            
            protected int _Id;
            
            protected string _Title;
            
            protected string _Body;
            
    		public static bool operator ==(global::Entities.nb_PageParts left, global::Entities.nb_PageParts right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.nb_PageParts left, global::Entities.nb_PageParts right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int Id {
                get {
                    return this._Id;
                }
                set {
                    this.OnPropertyChanged("Id", this._Id, value);
                    this._Id = value;
                }
            }
            
            public string Title {
                get {
                    return this._Title;
                }
                set {
                    this.OnPropertyChanged("Title", this._Title, value);
                    this._Title = value;
                }
            }
            
            public string Body {
                get {
                    return this._Body;
                }
                set {
                    this.OnPropertyChanged("Body", this._Body, value);
                    this._Body = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((nb_PageParts._nb_PagePartsEntityConfiguration == null)) {
                    nb_PageParts._nb_PagePartsEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.nb_PageParts");
                }
                return nb_PageParts._nb_PagePartsEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Id,
                        this._Title,
                        this._Body};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Id = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Title = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Body = reader.GetString(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Id = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Title = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Body = ((string)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.nb_PageParts).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.nb_PageParts)(obj)).isAttached) 
                            && (this.Id == ((global::Entities.nb_PageParts)(obj)).Id));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Id = new NBear.Common.PropertyItem("Id");
                
                public static NBear.Common.PropertyItem Title = new NBear.Common.PropertyItem("Title");
                
                public static NBear.Common.PropertyItem Body = new NBear.Common.PropertyItem("Body");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class m_UserArrayList : NBear.Common.EntityArrayList<Entities.m_User> {
        }
        
        [System.SerializableAttribute()]
        public partial class m_User : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _m_UserEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::Entities.m_GroupArrayList _Groups;
            
    		public static bool operator ==(global::Entities.m_User left, global::Entities.m_User right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.m_User left, global::Entities.m_User right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::Entities.m_GroupArrayList Groups {
                get {
                    if (this.IsQueryPropertyLoaded("Groups")) {
                    }
                    else {
                        global::Entities.m_GroupArrayList _a1;
                        _a1 = new Entities.m_GroupArrayList();
                        _a1.AddRange(((global::Entities.m_Group[])(this.Query(typeof(global::Entities.m_Group), "Groups", this))));
                        this.OnQueryPropertyChanged("Groups", this._Groups, _a1);
                        this._Groups = _a1;
                    }
                    if ((this._Groups == null)) {
                        global::Entities.m_GroupArrayList _a1;
                        _a1 = new global::Entities.m_GroupArrayList();
                        this.BindArrayListEventHandlers("Groups", _a1);
                        this._Groups = _a1;
                    }
                    return this._Groups;
                }
                set {
                    this.OnQueryPropertyChanged("Groups", this.Groups, value);
                    this._Groups = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((m_User._m_UserEntityConfiguration == null)) {
                    m_User._m_UserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.m_User");
                }
                return m_User._m_UserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.m_User", "Groups")))) {
                    global::Entities.m_GroupArrayList _a1;
                    _a1 = new Entities.m_GroupArrayList();
                    _a1.AddRange(((global::Entities.m_Group[])(this.Query(typeof(global::Entities.m_Group), "Groups", this))));
                    this.OnQueryPropertyChanged("Groups", this._Groups, _a1);
                    this._Groups = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.m_User).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.m_User)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.m_User)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class m_GroupArrayList : NBear.Common.EntityArrayList<Entities.m_Group> {
        }
        
        [System.SerializableAttribute()]
        public partial class m_Group : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _m_GroupEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::Entities.m_UserArrayList _Users;
            
    		public static bool operator ==(global::Entities.m_Group left, global::Entities.m_Group right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.m_Group left, global::Entities.m_Group right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::Entities.m_UserArrayList Users {
                get {
                    if (this.IsQueryPropertyLoaded("Users")) {
                    }
                    else {
                        global::Entities.m_UserArrayList _a1;
                        _a1 = new Entities.m_UserArrayList();
                        _a1.AddRange(((global::Entities.m_User[])(this.Query(typeof(global::Entities.m_User), "Users", this))));
                        this.OnQueryPropertyChanged("Users", this._Users, _a1);
                        this._Users = _a1;
                    }
                    if ((this._Users == null)) {
                        global::Entities.m_UserArrayList _a1;
                        _a1 = new global::Entities.m_UserArrayList();
                        this.BindArrayListEventHandlers("Users", _a1);
                        this._Users = _a1;
                    }
                    return this._Users;
                }
                set {
                    this.OnQueryPropertyChanged("Users", this.Users, value);
                    this._Users = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((m_Group._m_GroupEntityConfiguration == null)) {
                    m_Group._m_GroupEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.m_Group");
                }
                return m_Group._m_GroupEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.m_Group", "Users")))) {
                    global::Entities.m_UserArrayList _a1;
                    _a1 = new Entities.m_UserArrayList();
                    _a1.AddRange(((global::Entities.m_User[])(this.Query(typeof(global::Entities.m_User), "Users", this))));
                    this.OnQueryPropertyChanged("Users", this._Users, _a1);
                    this._Users = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.m_Group).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.m_Group)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.m_Group)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class m_UserGroupArrayList : NBear.Common.EntityArrayList<Entities.m_UserGroup> {
        }
        
        [System.SerializableAttribute()]
        public partial class m_UserGroup : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _m_UserGroupEntityConfiguration;
            
            protected int _UserID;
            
            protected int _GroupID;
            
    		public static bool operator ==(global::Entities.m_UserGroup left, global::Entities.m_UserGroup right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.m_UserGroup left, global::Entities.m_UserGroup right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int UserID {
                get {
                    return this._UserID;
                }
                set {
                    this.OnPropertyChanged("UserID", this._UserID, value);
                    this._UserID = value;
                }
            }
            
            public int GroupID {
                get {
                    return this._GroupID;
                }
                set {
                    this.OnPropertyChanged("GroupID", this._GroupID, value);
                    this._GroupID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((m_UserGroup._m_UserGroupEntityConfiguration == null)) {
                    m_UserGroup._m_UserGroupEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.m_UserGroup");
                }
                return m_UserGroup._m_UserGroupEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._UserID,
                        this._GroupID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._UserID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._GroupID = reader.GetInt32(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._UserID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._GroupID = ((int)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.m_UserGroup).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return (((this.isAttached && ((global::Entities.m_UserGroup)(obj)).isAttached) 
                            && (this.UserID == ((global::Entities.m_UserGroup)(obj)).UserID)) 
                            && (this.GroupID == ((global::Entities.m_UserGroup)(obj)).GroupID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem UserID = new NBear.Common.PropertyItem("UserID");
                
                public static NBear.Common.PropertyItem GroupID = new NBear.Common.PropertyItem("GroupID");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class home_SortsArrayList : NBear.Common.EntityArrayList<Entities.home_Sorts> {
        }
        
        [System.SerializableAttribute()]
        public partial class home_Sorts : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _home_SortsEntityConfiguration;
            
            protected int _Id;
            
            protected int _OrderNum;
            
            protected string _Title;
            
    		public static bool operator ==(global::Entities.home_Sorts left, global::Entities.home_Sorts right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.home_Sorts left, global::Entities.home_Sorts right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int Id {
                get {
                    return this._Id;
                }
                set {
                    this.OnPropertyChanged("Id", this._Id, value);
                    this._Id = value;
                }
            }
            
            public int OrderNum {
                get {
                    return this._OrderNum;
                }
                set {
                    this.OnPropertyChanged("OrderNum", this._OrderNum, value);
                    this._OrderNum = value;
                }
            }
            
            public string Title {
                get {
                    return this._Title;
                }
                set {
                    this.OnPropertyChanged("Title", this._Title, value);
                    this._Title = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((home_Sorts._home_SortsEntityConfiguration == null)) {
                    home_Sorts._home_SortsEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.home_Sorts");
                }
                return home_Sorts._home_SortsEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Id,
                        this._OrderNum,
                        this._Title};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Id = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._OrderNum = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Title = reader.GetString(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Id = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._OrderNum = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Title = ((string)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.home_Sorts).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.home_Sorts)(obj)).isAttached) 
                            && (this.Id == ((global::Entities.home_Sorts)(obj)).Id));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Id = new NBear.Common.PropertyItem("Id");
                
                public static NBear.Common.PropertyItem OrderNum = new NBear.Common.PropertyItem("OrderNum");
                
                public static NBear.Common.PropertyItem Title = new NBear.Common.PropertyItem("Title");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class home_PostSortsArrayList : NBear.Common.EntityArrayList<Entities.home_PostSorts> {
        }
        
        [System.SerializableAttribute()]
        public partial class home_PostSorts : home_Sorts {
            
            protected static NBear.Common.EntityConfiguration _home_PostSortsEntityConfiguration;
            
            protected int _ItemAmount;
            
    		public static bool operator ==(global::Entities.home_PostSorts left, global::Entities.home_PostSorts right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.home_PostSorts left, global::Entities.home_PostSorts right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ItemAmount {
                get {
                    return this._ItemAmount;
                }
                set {
                    this.OnPropertyChanged("ItemAmount", this._ItemAmount, value);
                    this._ItemAmount = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((home_PostSorts._home_PostSortsEntityConfiguration == null)) {
                    home_PostSorts._home_PostSortsEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.home_PostSorts");
                }
                return home_PostSorts._home_PostSortsEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Id,
                        this._OrderNum,
                        this._Title,
                        this._ItemAmount};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Id = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._OrderNum = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Title = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._ItemAmount = reader.GetInt32(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Id = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._OrderNum = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Title = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._ItemAmount = ((int)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.home_PostSorts).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.home_PostSorts)(obj)).isAttached) 
                            && (this.Id == ((global::Entities.home_PostSorts)(obj)).Id));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem Id = new NBear.Common.PropertyItem("Id");
                
                public static NBear.Common.PropertyItem OrderNum = new NBear.Common.PropertyItem("OrderNum");
                
                public static NBear.Common.PropertyItem Title = new NBear.Common.PropertyItem("Title");
                
                public static NBear.Common.PropertyItem ItemAmount = new NBear.Common.PropertyItem("ItemAmount");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class OrdersArrayList : NBear.Common.EntityArrayList<Entities.Orders> {
        }
        
        [System.SerializableAttribute()]
        public partial class Orders : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _OrdersEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::Test.Entities.OrderItemArrayList _OrderItem;
            
    		public static bool operator ==(global::Entities.Orders left, global::Entities.Orders right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Orders left, global::Entities.Orders right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::Test.Entities.OrderItemArrayList OrderItem {
                get {
                    if (this.IsQueryPropertyLoaded("OrderItem")) {
                    }
                    else {
                        global::Test.Entities.OrderItemArrayList _a1;
                        _a1 = new Test.Entities.OrderItemArrayList();
                        _a1.AddRange(((global::Test.Entities.OrderItem[])(this.Query(typeof(global::Test.Entities.OrderItem), "OrderItem", this))));
                        this.OnQueryPropertyChanged("OrderItem", this._OrderItem, _a1);
                        this._OrderItem = _a1;
                    }
                    if ((this._OrderItem == null)) {
                        global::Test.Entities.OrderItemArrayList _a1;
                        _a1 = new global::Test.Entities.OrderItemArrayList();
                        this.BindArrayListEventHandlers("OrderItem", _a1);
                        this._OrderItem = _a1;
                    }
                    return this._OrderItem;
                }
                set {
                    this.OnQueryPropertyChanged("OrderItem", this.OrderItem, value);
                    this._OrderItem = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Orders._OrdersEntityConfiguration == null)) {
                    Orders._OrdersEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Orders");
                }
                return Orders._OrdersEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.Orders", "OrderItem")))) {
                    global::Test.Entities.OrderItemArrayList _a1;
                    _a1 = new Test.Entities.OrderItemArrayList();
                    _a1.AddRange(((global::Test.Entities.OrderItem[])(this.Query(typeof(global::Test.Entities.OrderItem), "OrderItem", this))));
                    this.OnQueryPropertyChanged("OrderItem", this._OrderItem, _a1);
                    this._OrderItem = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Orders).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Orders)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Orders)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Test.Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class OrderItemArrayList : NBear.Common.EntityArrayList<Test.Entities.OrderItem> {
        }
        
        [System.SerializableAttribute()]
        public partial class OrderItem : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _OrderItemEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::Entities.Orders _Order;
            
            protected global::System.Int32? _Order_ID;
            
    		public static bool operator ==(global::Test.Entities.OrderItem left, global::Test.Entities.OrderItem right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Test.Entities.OrderItem left, global::Test.Entities.OrderItem right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::Entities.Orders Order {
                get {
                    if (this.IsQueryPropertyLoaded("Order")) {
                    }
                    else {
                        global::Entities.Orders _obj;
                        _obj = ((global::Entities.Orders)(this.QueryOne(typeof(global::Entities.Orders), "Order", this)));
                        this.OnQueryOnePropertyChanged("Order", this._Order, _obj);
                        this._Order = _obj;
                    }
                    return this._Order;
                }
                set {
                    this.OnQueryOnePropertyChanged("Order", this.Order, value);
                    this._Order = value;
                    if ((value == null)) {
                        this.OnPropertyChanged("Order", this._Order_ID, null);
                        this._Order_ID = null;
                    }
                    else {
                        this.OnPropertyChanged("Order", this._Order_ID, value.ID);
                        this._Order_ID = value.ID;
                    }
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((OrderItem._OrderItemEntityConfiguration == null)) {
                    OrderItem._OrderItemEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Test.Entities.OrderItem");
                }
                return OrderItem._OrderItemEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Test.Entities.OrderItem", "Order")))) {
                    global::Entities.Orders _obj;
                    _obj = ((global::Entities.Orders)(this.QueryOne(typeof(global::Entities.Orders), "Order", this)));
                    this.OnQueryOnePropertyChanged("Order", this._Order, _obj);
                    this._Order = _obj;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Order_ID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Order_ID = reader.GetInt32(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Order_ID = ((int)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Test.Entities.OrderItem).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Test.Entities.OrderItem)(obj)).isAttached) 
                            && (this.ID == ((global::Test.Entities.OrderItem)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem OrderID = new NBear.Common.PropertyItem("Order");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class SampleEntityWithContractArrayList : NBear.Common.EntityArrayList<Entities.SampleEntityWithContract> {
        }
        
        [System.SerializableAttribute()]
        public partial class SampleEntityWithContract : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _SampleEntityWithContractEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::Entities.SampleEntityWithContractArrayList _Childs;
            
            protected global::Entities.SampleEntityWithContract _Parent;
            
            protected global::System.Int32? _Parent_ID;
            
            protected string _Address;
            
    		public static bool operator ==(global::Entities.SampleEntityWithContract left, global::Entities.SampleEntityWithContract right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.SampleEntityWithContract left, global::Entities.SampleEntityWithContract right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::Entities.SampleEntityWithContractArrayList Childs {
                get {
                    if (this.IsQueryPropertyLoaded("Childs")) {
                    }
                    else {
                        global::Entities.SampleEntityWithContractArrayList _a1;
                        _a1 = new Entities.SampleEntityWithContractArrayList();
                        _a1.AddRange(((global::Entities.SampleEntityWithContract[])(this.Query(typeof(global::Entities.SampleEntityWithContract), "Childs", this))));
                        this.OnQueryPropertyChanged("Childs", this._Childs, _a1);
                        this._Childs = _a1;
                    }
                    if ((this._Childs == null)) {
                        global::Entities.SampleEntityWithContractArrayList _a1;
                        _a1 = new global::Entities.SampleEntityWithContractArrayList();
                        this.BindArrayListEventHandlers("Childs", _a1);
                        this._Childs = _a1;
                    }
                    return this._Childs;
                }
                set {
                    this.OnQueryPropertyChanged("Childs", this.Childs, value);
                    this._Childs = value;
                }
            }
            
            public global::Entities.SampleEntityWithContract Parent {
                get {
                    if (this.IsQueryPropertyLoaded("Parent")) {
                    }
                    else {
                        global::Entities.SampleEntityWithContract _obj;
                        _obj = ((global::Entities.SampleEntityWithContract)(this.QueryOne(typeof(global::Entities.SampleEntityWithContract), "Parent", this)));
                        this.OnQueryOnePropertyChanged("Parent", this._Parent, _obj);
                        this._Parent = _obj;
                    }
                    return this._Parent;
                }
                set {
                    this.OnQueryOnePropertyChanged("Parent", this.Parent, value);
                    this._Parent = value;
                    if ((value == null)) {
                        this.OnPropertyChanged("Parent", this._Parent_ID, null);
                        this._Parent_ID = null;
                    }
                    else {
                        this.OnPropertyChanged("Parent", this._Parent_ID, value.ID);
                        this._Parent_ID = value.ID;
                    }
                }
            }
            
            public string Address {
                get {
                    return this._Address;
                }
                set {
                    this.OnPropertyChanged("Address", this._Address, value);
                    this._Address = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((SampleEntityWithContract._SampleEntityWithContractEntityConfiguration == null)) {
                    SampleEntityWithContract._SampleEntityWithContractEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.SampleEntityWithContract");
                }
                return SampleEntityWithContract._SampleEntityWithContractEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.SampleEntityWithContract", "Childs")))) {
                    global::Entities.SampleEntityWithContractArrayList _a1;
                    _a1 = new Entities.SampleEntityWithContractArrayList();
                    _a1.AddRange(((global::Entities.SampleEntityWithContract[])(this.Query(typeof(global::Entities.SampleEntityWithContract), "Childs", this))));
                    this.OnQueryPropertyChanged("Childs", this._Childs, _a1);
                    this._Childs = _a1;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.SampleEntityWithContract", "Parent")))) {
                    global::Entities.SampleEntityWithContract _obj;
                    _obj = ((global::Entities.SampleEntityWithContract)(this.QueryOne(typeof(global::Entities.SampleEntityWithContract), "Parent", this)));
                    this.OnQueryOnePropertyChanged("Parent", this._Parent, _obj);
                    this._Parent = _obj;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Parent_ID,
                        this._Address};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Parent_ID = reader.GetInt32(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Address = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Parent_ID = ((int)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Address = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.SampleEntityWithContract).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.SampleEntityWithContract)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.SampleEntityWithContract)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem ParentID = new NBear.Common.PropertyItem("Parent");
                
                public static NBear.Common.PropertyItem Address = new NBear.Common.PropertyItem("Address");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class game_SiteNodesArrayList : NBear.Common.EntityArrayList<Entities.game_SiteNodes> {
        }
        
        [System.SerializableAttribute()]
        public partial class game_SiteNodes : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _game_SiteNodesEntityConfiguration;
            
            protected int _Id;
            
            protected int _OrderNum;
            
            protected global::Entities.game_SiteNodes _Parent;
            
            protected global::System.Int32? _Parent_Id;
            
            protected global::Entities.game_SiteNodesArrayList _Childs;
            
            protected bool _IsDisplay;
            
            protected string _Title;
            
            protected string _SubTitle;
            
    		public static bool operator ==(global::Entities.game_SiteNodes left, global::Entities.game_SiteNodes right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.game_SiteNodes left, global::Entities.game_SiteNodes right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int Id {
                get {
                    return this._Id;
                }
                set {
                    this.OnPropertyChanged("Id", this._Id, value);
                    this._Id = value;
                }
            }
            
            public int OrderNum {
                get {
                    return this._OrderNum;
                }
                set {
                    this.OnPropertyChanged("OrderNum", this._OrderNum, value);
                    this._OrderNum = value;
                }
            }
            
            public global::Entities.game_SiteNodes Parent {
                get {
                    if (this.IsQueryPropertyLoaded("Parent")) {
                    }
                    else {
                        global::Entities.game_SiteNodes _obj;
                        _obj = ((global::Entities.game_SiteNodes)(this.QueryOne(typeof(global::Entities.game_SiteNodes), "Parent", this)));
                        this.OnQueryOnePropertyChanged("Parent", this._Parent, _obj);
                        this._Parent = _obj;
                    }
                    return this._Parent;
                }
                set {
                    this.OnQueryOnePropertyChanged("Parent", this.Parent, value);
                    this._Parent = value;
                    if ((value == null)) {
                        this.OnPropertyChanged("Parent", this._Parent_Id, null);
                        this._Parent_Id = null;
                    }
                    else {
                        this.OnPropertyChanged("Parent", this._Parent_Id, value.Id);
                        this._Parent_Id = value.Id;
                    }
                }
            }
            
            public global::Entities.game_SiteNodesArrayList Childs {
                get {
                    if (this.IsQueryPropertyLoaded("Childs")) {
                    }
                    else {
                        global::Entities.game_SiteNodesArrayList _a1;
                        _a1 = new Entities.game_SiteNodesArrayList();
                        _a1.AddRange(((global::Entities.game_SiteNodes[])(this.Query(typeof(global::Entities.game_SiteNodes), "Childs", this))));
                        this.OnQueryPropertyChanged("Childs", this._Childs, _a1);
                        this._Childs = _a1;
                    }
                    if ((this._Childs == null)) {
                        global::Entities.game_SiteNodesArrayList _a1;
                        _a1 = new global::Entities.game_SiteNodesArrayList();
                        this.BindArrayListEventHandlers("Childs", _a1);
                        this._Childs = _a1;
                    }
                    return this._Childs;
                }
                set {
                    this.OnQueryPropertyChanged("Childs", this.Childs, value);
                    this._Childs = value;
                }
            }
            
            public bool IsDisplay {
                get {
                    return this._IsDisplay;
                }
                set {
                    this.OnPropertyChanged("IsDisplay", this._IsDisplay, value);
                    this._IsDisplay = value;
                }
            }
            
            public string Title {
                get {
                    return this._Title;
                }
                set {
                    this.OnPropertyChanged("Title", this._Title, value);
                    this._Title = value;
                }
            }
            
            public string SubTitle {
                get {
                    return this._SubTitle;
                }
                set {
                    this.OnPropertyChanged("SubTitle", this._SubTitle, value);
                    this._SubTitle = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((game_SiteNodes._game_SiteNodesEntityConfiguration == null)) {
                    game_SiteNodes._game_SiteNodesEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.game_SiteNodes");
                }
                return game_SiteNodes._game_SiteNodesEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.game_SiteNodes", "Parent")))) {
                    global::Entities.game_SiteNodes _obj;
                    _obj = ((global::Entities.game_SiteNodes)(this.QueryOne(typeof(global::Entities.game_SiteNodes), "Parent", this)));
                    this.OnQueryOnePropertyChanged("Parent", this._Parent, _obj);
                    this._Parent = _obj;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.game_SiteNodes", "Childs")))) {
                    global::Entities.game_SiteNodesArrayList _a1;
                    _a1 = new Entities.game_SiteNodesArrayList();
                    _a1.AddRange(((global::Entities.game_SiteNodes[])(this.Query(typeof(global::Entities.game_SiteNodes), "Childs", this))));
                    this.OnQueryPropertyChanged("Childs", this._Childs, _a1);
                    this._Childs = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Id,
                        this._OrderNum,
                        this._Parent_Id,
                        this._IsDisplay,
                        this._Title,
                        this._SubTitle};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Id = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._OrderNum = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Parent_Id = reader.GetInt32(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._IsDisplay = reader.GetBoolean(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Title = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._SubTitle = reader.GetString(5);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Id = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._OrderNum = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Parent_Id = ((int)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._IsDisplay = ((bool)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Title = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._SubTitle = ((string)(row[5]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.game_SiteNodes).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.game_SiteNodes)(obj)).isAttached) 
                            && (this.Id == ((global::Entities.game_SiteNodes)(obj)).Id));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem Id = new NBear.Common.PropertyItem("Id");
                
                public static NBear.Common.PropertyItem OrderNum = new NBear.Common.PropertyItem("OrderNum");
                
                public static NBear.Common.PropertyItem ParentID = new NBear.Common.PropertyItem("Parent");
                
                public static NBear.Common.PropertyItem IsDisplay = new NBear.Common.PropertyItem("IsDisplay");
                
                public static NBear.Common.PropertyItem Title = new NBear.Common.PropertyItem("Title");
                
                public static NBear.Common.PropertyItem SubTitle = new NBear.Common.PropertyItem("SubTitle");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TempPersonArrayList : NBear.Common.EntityArrayList<Entities.TempPerson> {
        }
        
        [System.SerializableAttribute()]
        public partial class TempPerson : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _TempPersonEntityConfiguration;
            
            protected string _Name;
            
            protected global::System.Guid _ID;
            
            protected string _C1;
            
            protected string _BaseID;
            
    		public static bool operator ==(global::Entities.TempPerson left, global::Entities.TempPerson right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TempPerson left, global::Entities.TempPerson right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public global::System.Guid ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string C1 {
                get {
                    return this._C1;
                }
                set {
                    this.OnPropertyChanged("C1", this._C1, value);
                    this._C1 = value;
                }
            }
            
            public string BaseID {
                get {
                    return this._BaseID;
                }
                set {
                    this.OnPropertyChanged("BaseID", this._BaseID, value);
                    this._BaseID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TempPerson._TempPersonEntityConfiguration == null)) {
                    TempPerson._TempPersonEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TempPerson");
                }
                return TempPerson._TempPersonEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._BaseID,
                        this._ID,
                        this._C1,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._BaseID = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ID = this.GetGuid(reader, 1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._C1 = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Name = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._BaseID = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 1)));
                }
                if ((false == row.IsNull(2))) {
                    this._C1 = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Name = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TempPerson).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TempPerson)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.TempPerson)(obj)).ID));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem BaseID = new NBear.Common.PropertyItem("BaseID");
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem C1 = new NBear.Common.PropertyItem("C1");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TempUserArrayList : NBear.Common.EntityArrayList<Entities.TempUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class TempUser : TempPerson {
            
            protected static NBear.Common.EntityConfiguration _TempUserEntityConfiguration;
            
            protected string _Email;
            
    		public static bool operator ==(global::Entities.TempUser left, global::Entities.TempUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TempUser left, global::Entities.TempUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Email {
                get {
                    return this._Email;
                }
                set {
                    this.OnPropertyChanged("Email", this._Email, value);
                    this._Email = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TempUser._TempUserEntityConfiguration == null)) {
                    TempUser._TempUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TempUser");
                }
                return TempUser._TempUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._BaseID,
                        this._ID,
                        this._C1,
                        this._Name,
                        this._Email};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._BaseID = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ID = this.GetGuid(reader, 1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._C1 = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Name = reader.GetString(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Email = reader.GetString(4);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._BaseID = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 1)));
                }
                if ((false == row.IsNull(2))) {
                    this._C1 = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Name = ((string)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Email = ((string)(row[4]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TempUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TempUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.TempUser)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem BaseID = new NBear.Common.PropertyItem("BaseID");
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem C1 = new NBear.Common.PropertyItem("C1");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Email = new NBear.Common.PropertyItem("Email");
                
                private _() {
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TempLocalUserArrayList : NBear.Common.EntityArrayList<Entities.TempLocalUser> {
        }
        
        [System.SerializableAttribute()]
        public partial class TempLocalUser : TempUser {
            
            protected static NBear.Common.EntityConfiguration _TempLocalUserEntityConfiguration;
            
            protected string _LoginID;
            
    		public static bool operator ==(global::Entities.TempLocalUser left, global::Entities.TempLocalUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TempLocalUser left, global::Entities.TempLocalUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string LoginID {
                get {
                    return this._LoginID;
                }
                set {
                    this.OnPropertyChanged("LoginID", this._LoginID, value);
                    this._LoginID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TempLocalUser._TempLocalUserEntityConfiguration == null)) {
                    TempLocalUser._TempLocalUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TempLocalUser");
                }
                return TempLocalUser._TempLocalUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._BaseID,
                        this._ID,
                        this._C1,
                        this._Name,
                        this._Email,
                        this._LoginID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._BaseID = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ID = this.GetGuid(reader, 1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._C1 = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Name = reader.GetString(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Email = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._LoginID = reader.GetString(5);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._BaseID = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ID = ((System.Guid)(this.GetGuid(row, 1)));
                }
                if ((false == row.IsNull(2))) {
                    this._C1 = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Name = ((string)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Email = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._LoginID = ((string)(row[5]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TempLocalUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TempLocalUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.TempLocalUser)(obj)).ID));
            }
            
            new public class _ {
                
                public static NBear.Common.PropertyItem BaseID = new NBear.Common.PropertyItem("BaseID");
                
                public static NBear.Common.PropertyItem ID = new NBear.Common.PropertyItem("ID");
                
                public static NBear.Common.PropertyItem C1 = new NBear.Common.PropertyItem("C1");
                
                public static NBear.Common.PropertyItem Name = new NBear.Common.PropertyItem("Name");
                
                public static NBear.Common.PropertyItem Email = new NBear.Common.PropertyItem("Email");
                
                public static NBear.Common.PropertyItem LoginID = new NBear.Common.PropertyItem("LoginID");
                
                private _() {
                }
            }
        }
    }
